//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace eStore.BusinessModules.USTax {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="USTaxServiceSoap", Namespace="http://tempuri.org/")]
    public partial class USTaxService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getSalesTaxByZIPOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStateTaxInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getZIPInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPFPOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public USTaxService() {
            this.Url = global::eStore.BusinessModules.Properties.Settings.Default.eStore_BusinessModules_USTax_USTaxService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getSalesTaxByZIPCompletedEventHandler getSalesTaxByZIPCompleted;
        
        /// <remarks/>
        public event getStateTaxInfoCompletedEventHandler getStateTaxInfoCompleted;
        
        /// <remarks/>
        public event getZIPInfoCompletedEventHandler getZIPInfoCompleted;
        
        /// <remarks/>
        public event getPFPCompletedEventHandler getPFPCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSalesTaxByZIP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getSalesTaxByZIP(string pStrZIP5Digit, ref decimal pDecSalesTax) {
            object[] results = this.Invoke("getSalesTaxByZIP", new object[] {
                        pStrZIP5Digit,
                        pDecSalesTax});
            pDecSalesTax = ((decimal)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getSalesTaxByZIPAsync(string pStrZIP5Digit, decimal pDecSalesTax) {
            this.getSalesTaxByZIPAsync(pStrZIP5Digit, pDecSalesTax, null);
        }
        
        /// <remarks/>
        public void getSalesTaxByZIPAsync(string pStrZIP5Digit, decimal pDecSalesTax, object userState) {
            if ((this.getSalesTaxByZIPOperationCompleted == null)) {
                this.getSalesTaxByZIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSalesTaxByZIPOperationCompleted);
            }
            this.InvokeAsync("getSalesTaxByZIP", new object[] {
                        pStrZIP5Digit,
                        pDecSalesTax}, this.getSalesTaxByZIPOperationCompleted, userState);
        }
        
        private void OngetSalesTaxByZIPOperationCompleted(object arg) {
            if ((this.getSalesTaxByZIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSalesTaxByZIPCompleted(this, new getSalesTaxByZIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getStateTaxInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getStateTaxInfo(string pStrStateAbb2Digit, ref bool TAX_SHIPPING_ALONE, ref bool Advan_Taxable) {
            object[] results = this.Invoke("getStateTaxInfo", new object[] {
                        pStrStateAbb2Digit,
                        TAX_SHIPPING_ALONE,
                        Advan_Taxable});
            TAX_SHIPPING_ALONE = ((bool)(results[1]));
            Advan_Taxable = ((bool)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getStateTaxInfoAsync(string pStrStateAbb2Digit, bool TAX_SHIPPING_ALONE, bool Advan_Taxable) {
            this.getStateTaxInfoAsync(pStrStateAbb2Digit, TAX_SHIPPING_ALONE, Advan_Taxable, null);
        }
        
        /// <remarks/>
        public void getStateTaxInfoAsync(string pStrStateAbb2Digit, bool TAX_SHIPPING_ALONE, bool Advan_Taxable, object userState) {
            if ((this.getStateTaxInfoOperationCompleted == null)) {
                this.getStateTaxInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStateTaxInfoOperationCompleted);
            }
            this.InvokeAsync("getStateTaxInfo", new object[] {
                        pStrStateAbb2Digit,
                        TAX_SHIPPING_ALONE,
                        Advan_Taxable}, this.getStateTaxInfoOperationCompleted, userState);
        }
        
        private void OngetStateTaxInfoOperationCompleted(object arg) {
            if ((this.getStateTaxInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStateTaxInfoCompleted(this, new getStateTaxInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getZIPInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getZIPInfo(string pStrZIP5Digit, ref string pStrStateAbb2Digit, ref string pStrCountyName, ref string pStrCityName, ref bool TAX_SHIPPING_ALONE, ref bool Advan_Taxable) {
            object[] results = this.Invoke("getZIPInfo", new object[] {
                        pStrZIP5Digit,
                        pStrStateAbb2Digit,
                        pStrCountyName,
                        pStrCityName,
                        TAX_SHIPPING_ALONE,
                        Advan_Taxable});
            pStrStateAbb2Digit = ((string)(results[1]));
            pStrCountyName = ((string)(results[2]));
            pStrCityName = ((string)(results[3]));
            TAX_SHIPPING_ALONE = ((bool)(results[4]));
            Advan_Taxable = ((bool)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getZIPInfoAsync(string pStrZIP5Digit, string pStrStateAbb2Digit, string pStrCountyName, string pStrCityName, bool TAX_SHIPPING_ALONE, bool Advan_Taxable) {
            this.getZIPInfoAsync(pStrZIP5Digit, pStrStateAbb2Digit, pStrCountyName, pStrCityName, TAX_SHIPPING_ALONE, Advan_Taxable, null);
        }
        
        /// <remarks/>
        public void getZIPInfoAsync(string pStrZIP5Digit, string pStrStateAbb2Digit, string pStrCountyName, string pStrCityName, bool TAX_SHIPPING_ALONE, bool Advan_Taxable, object userState) {
            if ((this.getZIPInfoOperationCompleted == null)) {
                this.getZIPInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetZIPInfoOperationCompleted);
            }
            this.InvokeAsync("getZIPInfo", new object[] {
                        pStrZIP5Digit,
                        pStrStateAbb2Digit,
                        pStrCountyName,
                        pStrCityName,
                        TAX_SHIPPING_ALONE,
                        Advan_Taxable}, this.getZIPInfoOperationCompleted, userState);
        }
        
        private void OngetZIPInfoOperationCompleted(object arg) {
            if ((this.getZIPInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getZIPInfoCompleted(this, new getZIPInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPFP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getPFP(string pParmList, bool pBolPoduction, ref string pResponse) {
            object[] results = this.Invoke("getPFP", new object[] {
                        pParmList,
                        pBolPoduction,
                        pResponse});
            pResponse = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getPFPAsync(string pParmList, bool pBolPoduction, string pResponse) {
            this.getPFPAsync(pParmList, pBolPoduction, pResponse, null);
        }
        
        /// <remarks/>
        public void getPFPAsync(string pParmList, bool pBolPoduction, string pResponse, object userState) {
            if ((this.getPFPOperationCompleted == null)) {
                this.getPFPOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPFPOperationCompleted);
            }
            this.InvokeAsync("getPFP", new object[] {
                        pParmList,
                        pBolPoduction,
                        pResponse}, this.getPFPOperationCompleted, userState);
        }
        
        private void OngetPFPOperationCompleted(object arg) {
            if ((this.getPFPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPFPCompleted(this, new getPFPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getSalesTaxByZIPCompletedEventHandler(object sender, getSalesTaxByZIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSalesTaxByZIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSalesTaxByZIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public decimal pDecSalesTax {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getStateTaxInfoCompletedEventHandler(object sender, getStateTaxInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStateTaxInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStateTaxInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool TAX_SHIPPING_ALONE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool Advan_Taxable {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getZIPInfoCompletedEventHandler(object sender, getZIPInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getZIPInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getZIPInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pStrStateAbb2Digit {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pStrCountyName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pStrCityName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool TAX_SHIPPING_ALONE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool Advan_Taxable {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getPFPCompletedEventHandler(object sender, getPFPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPFPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPFPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pResponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591