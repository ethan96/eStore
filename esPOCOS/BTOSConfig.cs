//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class BTOSConfig
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual string BTOConfigID
        {
            get { return _bTOConfigID; }
            set
            {
                if (_bTOConfigID != value)
                {
                    if (BTOSystem != null && BTOSystem.BTOConfigID != value)
                    {
                        BTOSystem = null;
                    }
                    _bTOConfigID = value;
                }
            }
        }
        private string _bTOConfigID;
    
        public virtual int ConfigID
        {
            get;
            set;
        }
    
        public virtual int CategoryComponentID
        {
            get;
            set;
        }
    
        public virtual int OptionComponentID
        {
            get;
            set;
        }
    
        public virtual int Qty
        {
            get;
            set;
        }
    
        public virtual string CategoryComponentDesc
        {
            get;
            set;
        }
    
        public virtual string OptionComponentDesc
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Price
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> AdjustedPrice
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (BTOConfigID == null) {
						 error_message.Add(new ErrorMessage("BTOConfigID", "BTOConfigID can not be Null "));
				}
		 if (CategoryComponentDesc == null) {
						 error_message.Add(new ErrorMessage("CategoryComponentDesc", "CategoryComponentDesc can not be Null "));
				}
		 if (OptionComponentDesc == null) {
						 error_message.Add(new ErrorMessage("OptionComponentDesc", "OptionComponentDesc can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(BTOSConfig); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual BTOSystem BTOSystem
        {
            get { return _bTOSystem; }
            set
            {
                if (!ReferenceEquals(_bTOSystem, value))
                {
                    var previousValue = _bTOSystem;
                    _bTOSystem = value;
                    FixupBTOSystem(previousValue);
                }
            }
        }
        private BTOSystem _bTOSystem;
    
        public virtual ICollection<BTOSConfigDetail> BTOSConfigDetails
        {
            get
            {
                if (_bTOSConfigDetails == null)
                {
                    var newCollection = new FixupCollection<BTOSConfigDetail>();
                    newCollection.CollectionChanged += FixupBTOSConfigDetails;
                    _bTOSConfigDetails = newCollection;
                }
                return _bTOSConfigDetails;
            }
            set
            {
                if (!ReferenceEquals(_bTOSConfigDetails, value))
                {
                    var previousValue = _bTOSConfigDetails as FixupCollection<BTOSConfigDetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBTOSConfigDetails;
                    }
                    _bTOSConfigDetails = value;
                    var newValue = value as FixupCollection<BTOSConfigDetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBTOSConfigDetails;
                    }
                }
            }
        }
        private ICollection<BTOSConfigDetail> _bTOSConfigDetails;

        #endregion

        #region Association Fixup
    
        private void FixupBTOSystem(BTOSystem previousValue)
        {
            if (previousValue != null && previousValue.BTOSConfigs.Contains(this))
            {
                previousValue.BTOSConfigs.Remove(this);
            }
    
            if (BTOSystem != null)
            {
                if (!BTOSystem.BTOSConfigs.Contains(this))
                {
                    BTOSystem.BTOSConfigs.Add(this);
                }
                if (BTOConfigID != BTOSystem.BTOConfigID)
                {
                    BTOConfigID = BTOSystem.BTOConfigID;
                }
            }
        }
    
        private void FixupBTOSConfigDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BTOSConfigDetail item in e.NewItems)
                {
                    item.BTOSConfig = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BTOSConfigDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.BTOSConfig, this))
                    {
                        item.BTOSConfig = null;
                    }
                }
            }
        }

        #endregion

    }
}
