//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class BundleItem
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int BundleItemID
        {
            get;
            set;
        }
    
        public virtual Nullable<int> BundleID
        {
            get { return _bundleID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_bundleID != value)
                    {
                        if (Bundle != null && Bundle.BundleID != value)
                        {
                            Bundle = null;
                        }
                        _bundleID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _bundleID;
    
        public virtual string ItemSProductID
        {
            get;
            set;
        }
    
        public virtual string ItemDescription
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Qty
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Sequence
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Price
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> AdjustedPrice
        {
            get;
            set;
        }
    
        public virtual string DeliveryPlant
        {
            get;
            set;
        }
    
        public virtual string BTOConfigID
        {
            get { return _bTOConfigID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_bTOConfigID != value)
                    {
                        if (BTOSystem != null && BTOSystem.BTOConfigID != value)
                        {
                            BTOSystem = null;
                        }
                        _bTOConfigID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _bTOConfigID;

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (ItemSProductID == null) {
						 error_message.Add(new ErrorMessage("ItemSProductID", "ItemSProductID can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(BundleItem); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual Bundle Bundle
        {
            get { return _bundle; }
            set
            {
                if (!ReferenceEquals(_bundle, value))
                {
                    var previousValue = _bundle;
                    _bundle = value;
                    FixupBundle(previousValue);
                }
            }
        }
        private Bundle _bundle;
    
        public virtual BTOSystem BTOSystem
        {
            get { return _bTOSystem; }
            set
            {
                if (!ReferenceEquals(_bTOSystem, value))
                {
                    var previousValue = _bTOSystem;
                    _bTOSystem = value;
                    FixupBTOSystem(previousValue);
                }
            }
        }
        private BTOSystem _bTOSystem;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupBundle(Bundle previousValue)
        {
            if (previousValue != null && previousValue.BundleItems.Contains(this))
            {
                previousValue.BundleItems.Remove(this);
            }
    
            if (Bundle != null)
            {
                if (!Bundle.BundleItems.Contains(this))
                {
                    Bundle.BundleItems.Add(this);
                }
                if (BundleID != Bundle.BundleID)
                {
                    BundleID = Bundle.BundleID;
                }
            }
            else if (!_settingFK)
            {
                BundleID = null;
            }
        }
    
        private void FixupBTOSystem(BTOSystem previousValue)
        {
            if (BTOSystem != null)
            {
                if (BTOConfigID != BTOSystem.BTOConfigID)
                {
                    BTOConfigID = BTOSystem.BTOConfigID;
                }
            }
            else if (!_settingFK)
            {
                BTOConfigID = null;
            }
        }

        #endregion

    }
}
