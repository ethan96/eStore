//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class CTOSBOM
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual string SProductID
        {
            get { return _sProductID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_sProductID != value)
                    {
                        if (Product_Ctos != null && Product_Ctos.SProductID != value)
                        {
                            Product_Ctos = null;
                        }
                        _sProductID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _sProductID;
    
        public virtual string StoreID
        {
            get { return _storeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_storeID != value)
                    {
                        if (Product_Ctos != null && Product_Ctos.StoreID != value)
                        {
                            Product_Ctos = null;
                        }
                        if (CTOSComponent != null && CTOSComponent.StoreID != value)
                        {
                            CTOSComponent = null;
                        }
                        _storeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _storeID;
    
        public virtual int ComponentID
        {
            get { return _componentID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_componentID != value)
                    {
                        if (CTOSComponent != null && CTOSComponent.ComponentID != value)
                        {
                            CTOSComponent = null;
                        }
                        _componentID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _componentID;
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int Seq
        {
            get;
            set;
        }
    
        public virtual bool Defaults
        {
            get;
            set;
        }
    
        public virtual string Exceptionlist
        {
            get;
            set;
        }
    
        public virtual decimal AdjustRate
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Price
        {
            get;
            set;
        }
    
        public virtual string InputType
        {
            get;
            set;
        }
    
        public virtual bool Show
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Quantity
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual decimal Cost
        {
            get;
            set;
        }
    
        public virtual string Message
        {
            get;
            set;
        }
    
        public virtual int Maxquantity
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ParentID
        {
            get { return _parentID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentID != value)
                    {
                        if (ParentComponent != null && ParentComponent.ID != value)
                        {
                            ParentComponent = null;
                        }
                        _parentID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _parentID;
    
        public virtual Nullable<bool> MainPart
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (SProductID == null) {
						 error_message.Add(new ErrorMessage("SProductID", "SProductID can not be Null "));
				}
		 if (StoreID == null) {
						 error_message.Add(new ErrorMessage("StoreID", "StoreID can not be Null "));
				}
		 if (Message == null) {
						 error_message.Add(new ErrorMessage("Message", "Message can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(CTOSBOM); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual Product_Ctos Product_Ctos
        {
            get { return _product_Ctos; }
            set
            {
                if (!ReferenceEquals(_product_Ctos, value))
                {
                    var previousValue = _product_Ctos;
                    _product_Ctos = value;
                    FixupProduct_Ctos(previousValue);
                }
            }
        }
        private Product_Ctos _product_Ctos;
    
        public virtual ICollection<CTOSBOM> ChildComponents
        {
            get
            {
                if (_childComponents == null)
                {
                    var newCollection = new FixupCollection<CTOSBOM>();
                    newCollection.CollectionChanged += FixupChildComponents;
                    _childComponents = newCollection;
                }
                return _childComponents;
            }
            set
            {
                if (!ReferenceEquals(_childComponents, value))
                {
                    var previousValue = _childComponents as FixupCollection<CTOSBOM>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildComponents;
                    }
                    _childComponents = value;
                    var newValue = value as FixupCollection<CTOSBOM>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildComponents;
                    }
                }
            }
        }
        private ICollection<CTOSBOM> _childComponents;
    
        public virtual CTOSBOM ParentComponent
        {
            get { return _parentComponent; }
            set
            {
                if (!ReferenceEquals(_parentComponent, value))
                {
                    var previousValue = _parentComponent;
                    _parentComponent = value;
                    FixupParentComponent(previousValue);
                }
            }
        }
        private CTOSBOM _parentComponent;
    
        public virtual CTOSComponent CTOSComponent
        {
            get { return _cTOSComponent; }
            set
            {
                if (!ReferenceEquals(_cTOSComponent, value))
                {
                    var previousValue = _cTOSComponent;
                    _cTOSComponent = value;
                    FixupCTOSComponent(previousValue);
                }
            }
        }
        private CTOSComponent _cTOSComponent;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupProduct_Ctos(Product_Ctos previousValue)
        {
            if (previousValue != null && previousValue.CTOSBOMs.Contains(this))
            {
                previousValue.CTOSBOMs.Remove(this);
            }
    
            if (Product_Ctos != null)
            {
                if (!Product_Ctos.CTOSBOMs.Contains(this))
                {
                    Product_Ctos.CTOSBOMs.Add(this);
                }
                if (StoreID != Product_Ctos.StoreID)
                {
                    StoreID = Product_Ctos.StoreID;
                }
                if (SProductID != Product_Ctos.SProductID)
                {
                    SProductID = Product_Ctos.SProductID;
                }
            }
        }
    
        private void FixupParentComponent(CTOSBOM previousValue)
        {
            if (previousValue != null && previousValue.ChildComponents.Contains(this))
            {
                previousValue.ChildComponents.Remove(this);
            }
    
            if (ParentComponent != null)
            {
                if (!ParentComponent.ChildComponents.Contains(this))
                {
                    ParentComponent.ChildComponents.Add(this);
                }
                if (ParentID != ParentComponent.ID)
                {
                    ParentID = ParentComponent.ID;
                }
            }
            else if (!_settingFK)
            {
                ParentID = null;
            }
        }
    
        private void FixupCTOSComponent(CTOSComponent previousValue)
        {
            if (previousValue != null && previousValue.CTOSBOMs.Contains(this))
            {
                previousValue.CTOSBOMs.Remove(this);
            }
    
            if (CTOSComponent != null)
            {
                if (!CTOSComponent.CTOSBOMs.Contains(this))
                {
                    CTOSComponent.CTOSBOMs.Add(this);
                }
                if (ComponentID != CTOSComponent.ComponentID)
                {
                    ComponentID = CTOSComponent.ComponentID;
                }
                if (StoreID != CTOSComponent.StoreID)
                {
                    StoreID = CTOSComponent.StoreID;
                }
            }
        }
    
        private void FixupChildComponents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CTOSBOM item in e.NewItems)
                {
                    item.ParentComponent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CTOSBOM item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentComponent, this))
                    {
                        item.ParentComponent = null;
                    }
                }
            }
        }

        #endregion

    }
}
