//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class CTOSComponent
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int ComponentID
        {
            get;
            set;
        }
    
        public virtual string ComponentName
        {
            get;
            set;
        }
    
        public virtual string ComponentDesc
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ComponentParentID
        {
            get { return _componentParentID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_componentParentID != value)
                    {
                        if (CTOSComponent2 != null && CTOSComponent2.ComponentID != value)
                        {
                            var previousValue = _cTOSComponent2;
                            _cTOSComponent2 = null;
                            FixupCTOSComponent2(previousValue, skipKeys: true);
                        }
                        _componentParentID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _componentParentID;
    
        public virtual string ComponentType
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ReplacedComponentID
        {
            get { return _replacedComponentID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_replacedComponentID != value)
                    {
                        if (CTOSComponent3 != null && CTOSComponent3.ComponentID != value)
                        {
                            var previousValue = _cTOSComponent3;
                            _cTOSComponent3 = null;
                            FixupCTOSComponent3(previousValue, skipKeys: true);
                        }
                        _replacedComponentID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _replacedComponentID;
    
        public virtual int DefaultSeq
        {
            get;
            set;
        }
    
        public virtual string SProductID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> MainPart
        {
            get;
            set;
        }
    
        public virtual string StoreID
        {
            get { return _storeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_storeID != value)
                    {
                        if (CTOSComponent2 != null && CTOSComponent2.StoreID != value)
                        {
                            var previousValue = _cTOSComponent2;
                            _cTOSComponent2 = null;
                            FixupCTOSComponent2(previousValue, skipKeys: true);
                        }
                        if (CTOSComponent3 != null && CTOSComponent3.StoreID != value)
                        {
                            var previousValue = _cTOSComponent3;
                            _cTOSComponent3 = null;
                            FixupCTOSComponent3(previousValue, skipKeys: true);
                        }
                        _storeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _storeID;
    
        public virtual string Thumbnail
        {
            get;
            set;
        }
    
        public virtual string CategoryClassification
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (StoreID == null) {
						 error_message.Add(new ErrorMessage("StoreID", "StoreID can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(CTOSComponent); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual ICollection<CTOSBOM> CTOSBOMs
        {
            get
            {
                if (_cTOSBOMs == null)
                {
                    var newCollection = new FixupCollection<CTOSBOM>();
                    newCollection.CollectionChanged += FixupCTOSBOMs;
                    _cTOSBOMs = newCollection;
                }
                return _cTOSBOMs;
            }
            set
            {
                if (!ReferenceEquals(_cTOSBOMs, value))
                {
                    var previousValue = _cTOSBOMs as FixupCollection<CTOSBOM>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCTOSBOMs;
                    }
                    _cTOSBOMs = value;
                    var newValue = value as FixupCollection<CTOSBOM>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCTOSBOMs;
                    }
                }
            }
        }
        private ICollection<CTOSBOM> _cTOSBOMs;
    
        public virtual ICollection<CTOSComponent> CTOSComponent1
        {
            get
            {
                if (_cTOSComponent1 == null)
                {
                    var newCollection = new FixupCollection<CTOSComponent>();
                    newCollection.CollectionChanged += FixupCTOSComponent1;
                    _cTOSComponent1 = newCollection;
                }
                return _cTOSComponent1;
            }
            set
            {
                if (!ReferenceEquals(_cTOSComponent1, value))
                {
                    var previousValue = _cTOSComponent1 as FixupCollection<CTOSComponent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCTOSComponent1;
                    }
                    _cTOSComponent1 = value;
                    var newValue = value as FixupCollection<CTOSComponent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCTOSComponent1;
                    }
                }
            }
        }
        private ICollection<CTOSComponent> _cTOSComponent1;
    
        public virtual CTOSComponent CTOSComponent2
        {
            get { return _cTOSComponent2; }
            set
            {
                if (!ReferenceEquals(_cTOSComponent2, value))
                {
                    var previousValue = _cTOSComponent2;
                    _cTOSComponent2 = value;
                    FixupCTOSComponent2(previousValue);
                }
            }
        }
        private CTOSComponent _cTOSComponent2;
    
        public virtual ICollection<CTOSComponent> CTOSComponent11
        {
            get
            {
                if (_cTOSComponent11 == null)
                {
                    var newCollection = new FixupCollection<CTOSComponent>();
                    newCollection.CollectionChanged += FixupCTOSComponent11;
                    _cTOSComponent11 = newCollection;
                }
                return _cTOSComponent11;
            }
            set
            {
                if (!ReferenceEquals(_cTOSComponent11, value))
                {
                    var previousValue = _cTOSComponent11 as FixupCollection<CTOSComponent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCTOSComponent11;
                    }
                    _cTOSComponent11 = value;
                    var newValue = value as FixupCollection<CTOSComponent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCTOSComponent11;
                    }
                }
            }
        }
        private ICollection<CTOSComponent> _cTOSComponent11;
    
        public virtual CTOSComponent CTOSComponent3
        {
            get { return _cTOSComponent3; }
            set
            {
                if (!ReferenceEquals(_cTOSComponent3, value))
                {
                    var previousValue = _cTOSComponent3;
                    _cTOSComponent3 = value;
                    FixupCTOSComponent3(previousValue);
                }
            }
        }
        private CTOSComponent _cTOSComponent3;
    
        public virtual ICollection<CTOSComponentMapping> CTOSComponentMappingsTo
        {
            get
            {
                if (_cTOSComponentMappingsTo == null)
                {
                    var newCollection = new FixupCollection<CTOSComponentMapping>();
                    newCollection.CollectionChanged += FixupCTOSComponentMappingsTo;
                    _cTOSComponentMappingsTo = newCollection;
                }
                return _cTOSComponentMappingsTo;
            }
            set
            {
                if (!ReferenceEquals(_cTOSComponentMappingsTo, value))
                {
                    var previousValue = _cTOSComponentMappingsTo as FixupCollection<CTOSComponentMapping>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCTOSComponentMappingsTo;
                    }
                    _cTOSComponentMappingsTo = value;
                    var newValue = value as FixupCollection<CTOSComponentMapping>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCTOSComponentMappingsTo;
                    }
                }
            }
        }
        private ICollection<CTOSComponentMapping> _cTOSComponentMappingsTo;
    
        public virtual ICollection<CTOSComponentMapping> CTOSComponentMappingsFrom
        {
            get
            {
                if (_cTOSComponentMappingsFrom == null)
                {
                    var newCollection = new FixupCollection<CTOSComponentMapping>();
                    newCollection.CollectionChanged += FixupCTOSComponentMappingsFrom;
                    _cTOSComponentMappingsFrom = newCollection;
                }
                return _cTOSComponentMappingsFrom;
            }
            set
            {
                if (!ReferenceEquals(_cTOSComponentMappingsFrom, value))
                {
                    var previousValue = _cTOSComponentMappingsFrom as FixupCollection<CTOSComponentMapping>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCTOSComponentMappingsFrom;
                    }
                    _cTOSComponentMappingsFrom = value;
                    var newValue = value as FixupCollection<CTOSComponentMapping>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCTOSComponentMappingsFrom;
                    }
                }
            }
        }
        private ICollection<CTOSComponentMapping> _cTOSComponentMappingsFrom;
    
        public virtual ICollection<CTOSComponentDetail> CTOSComponentDetails
        {
            get
            {
                if (_cTOSComponentDetails == null)
                {
                    var newCollection = new FixupCollection<CTOSComponentDetail>();
                    newCollection.CollectionChanged += FixupCTOSComponentDetails;
                    _cTOSComponentDetails = newCollection;
                }
                return _cTOSComponentDetails;
            }
            set
            {
                if (!ReferenceEquals(_cTOSComponentDetails, value))
                {
                    var previousValue = _cTOSComponentDetails as FixupCollection<CTOSComponentDetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCTOSComponentDetails;
                    }
                    _cTOSComponentDetails = value;
                    var newValue = value as FixupCollection<CTOSComponentDetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCTOSComponentDetails;
                    }
                }
            }
        }
        private ICollection<CTOSComponentDetail> _cTOSComponentDetails;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCTOSComponent2(CTOSComponent previousValue, bool skipKeys = false)
        {
            if (previousValue != null && previousValue.CTOSComponent1.Contains(this))
            {
                previousValue.CTOSComponent1.Remove(this);
            }
    
            if (CTOSComponent2 != null)
            {
                if (!CTOSComponent2.CTOSComponent1.Contains(this))
                {
                    CTOSComponent2.CTOSComponent1.Add(this);
                }
                if (ComponentParentID != CTOSComponent2.ComponentID)
                {
                    ComponentParentID = CTOSComponent2.ComponentID;
                }
                if (StoreID != CTOSComponent2.StoreID)
                {
                    StoreID = CTOSComponent2.StoreID;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                ComponentParentID = null;
            }
        }
    
        private void FixupCTOSComponent3(CTOSComponent previousValue, bool skipKeys = false)
        {
            if (previousValue != null && previousValue.CTOSComponent11.Contains(this))
            {
                previousValue.CTOSComponent11.Remove(this);
            }
    
            if (CTOSComponent3 != null)
            {
                if (!CTOSComponent3.CTOSComponent11.Contains(this))
                {
                    CTOSComponent3.CTOSComponent11.Add(this);
                }
                if (ReplacedComponentID != CTOSComponent3.ComponentID)
                {
                    ReplacedComponentID = CTOSComponent3.ComponentID;
                }
                if (StoreID != CTOSComponent3.StoreID)
                {
                    StoreID = CTOSComponent3.StoreID;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                ReplacedComponentID = null;
            }
        }
    
        private void FixupCTOSBOMs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CTOSBOM item in e.NewItems)
                {
                    item.CTOSComponent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CTOSBOM item in e.OldItems)
                {
                    if (ReferenceEquals(item.CTOSComponent, this))
                    {
                        item.CTOSComponent = null;
                    }
                }
            }
        }
    
        private void FixupCTOSComponent1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CTOSComponent item in e.NewItems)
                {
                    item.CTOSComponent2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CTOSComponent item in e.OldItems)
                {
                    if (ReferenceEquals(item.CTOSComponent2, this))
                    {
                        item.CTOSComponent2 = null;
                    }
                }
            }
        }
    
        private void FixupCTOSComponent11(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CTOSComponent item in e.NewItems)
                {
                    item.CTOSComponent3 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CTOSComponent item in e.OldItems)
                {
                    if (ReferenceEquals(item.CTOSComponent3, this))
                    {
                        item.CTOSComponent3 = null;
                    }
                }
            }
        }
    
        private void FixupCTOSComponentMappingsTo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CTOSComponentMapping item in e.NewItems)
                {
                    item.CTOSComponentTo = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CTOSComponentMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.CTOSComponentTo, this))
                    {
                        item.CTOSComponentTo = null;
                    }
                }
            }
        }
    
        private void FixupCTOSComponentMappingsFrom(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CTOSComponentMapping item in e.NewItems)
                {
                    item.CTOSComponentFrom = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CTOSComponentMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.CTOSComponentFrom, this))
                    {
                        item.CTOSComponentFrom = null;
                    }
                }
            }
        }
    
        private void FixupCTOSComponentDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CTOSComponentDetail item in e.NewItems)
                {
                    item.CTOSComponent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CTOSComponentDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.CTOSComponent, this))
                    {
                        item.CTOSComponent = null;
                    }
                }
            }
        }

        #endregion

    }
}
