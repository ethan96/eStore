//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class CTOSComponentMapping
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string StoreIDFrom
        {
            get { return _storeIDFrom; }
            set
            {
                if (_storeIDFrom != value)
                {
                    if (CTOSComponentFrom != null && CTOSComponentFrom.StoreID != value)
                    {
                        CTOSComponentFrom = null;
                    }
                    _storeIDFrom = value;
                }
            }
        }
        private string _storeIDFrom;
    
        public virtual int ComponentIDFrom
        {
            get { return _componentIDFrom; }
            set
            {
                if (_componentIDFrom != value)
                {
                    if (CTOSComponentFrom != null && CTOSComponentFrom.ComponentID != value)
                    {
                        CTOSComponentFrom = null;
                    }
                    _componentIDFrom = value;
                }
            }
        }
        private int _componentIDFrom;
    
        public virtual string StoreIDTo
        {
            get { return _storeIDTo; }
            set
            {
                if (_storeIDTo != value)
                {
                    if (CTOSComponentTo != null && CTOSComponentTo.StoreID != value)
                    {
                        CTOSComponentTo = null;
                    }
                    _storeIDTo = value;
                }
            }
        }
        private string _storeIDTo;
    
        public virtual int ComponentIDTo
        {
            get { return _componentIDTo; }
            set
            {
                if (_componentIDTo != value)
                {
                    if (CTOSComponentTo != null && CTOSComponentTo.ComponentID != value)
                    {
                        CTOSComponentTo = null;
                    }
                    _componentIDTo = value;
                }
            }
        }
        private int _componentIDTo;

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (StoreIDFrom == null) {
						 error_message.Add(new ErrorMessage("StoreIDFrom", "StoreIDFrom can not be Null "));
				}
		 if (StoreIDTo == null) {
						 error_message.Add(new ErrorMessage("StoreIDTo", "StoreIDTo can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(CTOSComponentMapping); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual CTOSComponent CTOSComponentTo
        {
            get { return _cTOSComponentTo; }
            set
            {
                if (!ReferenceEquals(_cTOSComponentTo, value))
                {
                    var previousValue = _cTOSComponentTo;
                    _cTOSComponentTo = value;
                    FixupCTOSComponentTo(previousValue);
                }
            }
        }
        private CTOSComponent _cTOSComponentTo;
    
        public virtual CTOSComponent CTOSComponentFrom
        {
            get { return _cTOSComponentFrom; }
            set
            {
                if (!ReferenceEquals(_cTOSComponentFrom, value))
                {
                    var previousValue = _cTOSComponentFrom;
                    _cTOSComponentFrom = value;
                    FixupCTOSComponentFrom(previousValue);
                }
            }
        }
        private CTOSComponent _cTOSComponentFrom;

        #endregion

        #region Association Fixup
    
        private void FixupCTOSComponentTo(CTOSComponent previousValue)
        {
            if (previousValue != null && previousValue.CTOSComponentMappingsTo.Contains(this))
            {
                previousValue.CTOSComponentMappingsTo.Remove(this);
            }
    
            if (CTOSComponentTo != null)
            {
                if (!CTOSComponentTo.CTOSComponentMappingsTo.Contains(this))
                {
                    CTOSComponentTo.CTOSComponentMappingsTo.Add(this);
                }
                if (ComponentIDTo != CTOSComponentTo.ComponentID)
                {
                    ComponentIDTo = CTOSComponentTo.ComponentID;
                }
                if (StoreIDTo != CTOSComponentTo.StoreID)
                {
                    StoreIDTo = CTOSComponentTo.StoreID;
                }
            }
        }
    
        private void FixupCTOSComponentFrom(CTOSComponent previousValue)
        {
            if (previousValue != null && previousValue.CTOSComponentMappingsFrom.Contains(this))
            {
                previousValue.CTOSComponentMappingsFrom.Remove(this);
            }
    
            if (CTOSComponentFrom != null)
            {
                if (!CTOSComponentFrom.CTOSComponentMappingsFrom.Contains(this))
                {
                    CTOSComponentFrom.CTOSComponentMappingsFrom.Add(this);
                }
                if (ComponentIDFrom != CTOSComponentFrom.ComponentID)
                {
                    ComponentIDFrom = CTOSComponentFrom.ComponentID;
                }
                if (StoreIDFrom != CTOSComponentFrom.StoreID)
                {
                    StoreIDFrom = CTOSComponentFrom.StoreID;
                }
            }
        }

        #endregion

    }
}
