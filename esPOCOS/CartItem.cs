//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class CartItem
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual string CartID
        {
            get { return _cartID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_cartID != value)
                    {
                        if (Cart != null && Cart.CartID != value)
                        {
                            Cart = null;
                        }
                        _cartID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _cartID;
    
        public virtual int ItemNo
        {
            get;
            set;
        }
    
        public virtual string StoreID
        {
            get { return _storeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_storeID != value)
                    {
                        if (Part != null && Part.StoreID != value)
                        {
                            Part = null;
                        }
                        if (Cart != null && Cart.StoreID != value)
                        {
                            Cart = null;
                        }
                        _storeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _storeID;
    
        public virtual string BTOConfigID
        {
            get { return _bTOConfigID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_bTOConfigID != value)
                    {
                        if (BTOSystem != null && BTOSystem.BTOConfigID != value)
                        {
                            BTOSystem = null;
                        }
                        _bTOConfigID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _bTOConfigID;
    
        public virtual string SProductID
        {
            get { return _sProductID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_sProductID != value)
                    {
                        if (Part != null && Part.SProductID != value)
                        {
                            Part = null;
                        }
                        _sProductID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _sProductID;
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual int Qty
        {
            get;
            set;
        }
    
        public virtual System.DateTime DueDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime RequiredDate
        {
            get;
            set;
        }
    
        public virtual decimal AdjustedPrice
        {
            get;
            set;
        }
    
        public virtual decimal UnitPrice
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> AutoOrderFlag
        {
            get;
            set;
        }
    
        public virtual Nullable<int> AutoOrderQty
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> SupplierDueDate
        {
            get;
            set;
        }
    
        public virtual string ItemType
        {
            get;
            set;
        }
    
        public virtual string CustomerMessage
        {
            get;
            set;
        }
    
        public virtual Nullable<int> PackageID
        {
            get;
            set;
        }
    
        public virtual string AffiliateID
        {
            get;
            set;
        }
    
        public virtual string ProductName
        {
            get;
            set;
        }
    
        public virtual string DeliveryPlant
        {
            get;
            set;
        }
    
        public virtual string ShippingMethod
        {
            get;
            set;
        }
    
        public virtual Nullable<int> PromotionStrategy
        {
            get { return _promotionStrategy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_promotionStrategy != value)
                    {
                        if (CampaignStrategy != null && CampaignStrategy.ID != value)
                        {
                            CampaignStrategy = null;
                        }
                        _promotionStrategy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _promotionStrategy;
    
        public virtual Nullable<decimal> DiscountAmount
        {
            get;
            set;
        }
    
        public virtual string PromotionMessage
        {
            get;
            set;
        }
    
        public virtual Nullable<int> BundleID
        {
            get { return _bundleID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_bundleID != value)
                    {
                        if (Bundle != null && Bundle.BundleID != value)
                        {
                            Bundle = null;
                        }
                        _bundleID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _bundleID;
    
        public virtual Nullable<int> WarrantyItem
        {
            get;
            set;
        }
    
        public virtual Nullable<int> RelatedItem
        {
            get;
            set;
        }
    
        public virtual Nullable<int> RelatedType
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (CartID == null) {
						 error_message.Add(new ErrorMessage("CartID", "CartID can not be Null "));
				}
		 if (StoreID == null) {
						 error_message.Add(new ErrorMessage("StoreID", "StoreID can not be Null "));
				}
		 if (SProductID == null) {
						 error_message.Add(new ErrorMessage("SProductID", "SProductID can not be Null "));
				}
		 if (ItemType == null) {
						 error_message.Add(new ErrorMessage("ItemType", "ItemType can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(CartItem); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual BTOSystem BTOSystem
        {
            get { return _bTOSystem; }
            set
            {
                if (!ReferenceEquals(_bTOSystem, value))
                {
                    var previousValue = _bTOSystem;
                    _bTOSystem = value;
                    FixupBTOSystem(previousValue);
                }
            }
        }
        private BTOSystem _bTOSystem;
    
        public virtual Part Part
        {
            get { return _part; }
            set
            {
                if (!ReferenceEquals(_part, value))
                {
                    var previousValue = _part;
                    _part = value;
                    FixupPart(previousValue);
                }
            }
        }
        private Part _part;
    
        public virtual Cart Cart
        {
            get { return _cart; }
            set
            {
                if (!ReferenceEquals(_cart, value))
                {
                    var previousValue = _cart;
                    _cart = value;
                    FixupCart(previousValue);
                }
            }
        }
        private Cart _cart;
    
        public virtual CampaignStrategy CampaignStrategy
        {
            get { return _campaignStrategy; }
            set
            {
                if (!ReferenceEquals(_campaignStrategy, value))
                {
                    var previousValue = _campaignStrategy;
                    _campaignStrategy = value;
                    FixupCampaignStrategy(previousValue);
                }
            }
        }
        private CampaignStrategy _campaignStrategy;
    
        public virtual Bundle Bundle
        {
            get { return _bundle; }
            set
            {
                if (!ReferenceEquals(_bundle, value))
                {
                    var previousValue = _bundle;
                    _bundle = value;
                    FixupBundle(previousValue);
                }
            }
        }
        private Bundle _bundle;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupBTOSystem(BTOSystem previousValue)
        {
            if (BTOSystem != null)
            {
                if (BTOConfigID != BTOSystem.BTOConfigID)
                {
                    BTOConfigID = BTOSystem.BTOConfigID;
                }
            }
            else if (!_settingFK)
            {
                BTOConfigID = null;
            }
        }
    
        private void FixupPart(Part previousValue)
        {
            if (Part != null)
            {
                if (StoreID != Part.StoreID)
                {
                    StoreID = Part.StoreID;
                }
                if (SProductID != Part.SProductID)
                {
                    SProductID = Part.SProductID;
                }
            }
        }
    
        private void FixupCart(Cart previousValue)
        {
            if (previousValue != null && previousValue.CartItems.Contains(this))
            {
                previousValue.CartItems.Remove(this);
            }
    
            if (Cart != null)
            {
                if (!Cart.CartItems.Contains(this))
                {
                    Cart.CartItems.Add(this);
                }
                if (CartID != Cart.CartID)
                {
                    CartID = Cart.CartID;
                }
                if (StoreID != Cart.StoreID)
                {
                    StoreID = Cart.StoreID;
                }
            }
        }
    
        private void FixupCampaignStrategy(CampaignStrategy previousValue)
        {
            if (previousValue != null && previousValue.CartItems.Contains(this))
            {
                previousValue.CartItems.Remove(this);
            }
    
            if (CampaignStrategy != null)
            {
                if (!CampaignStrategy.CartItems.Contains(this))
                {
                    CampaignStrategy.CartItems.Add(this);
                }
                if (PromotionStrategy != CampaignStrategy.ID)
                {
                    PromotionStrategy = CampaignStrategy.ID;
                }
            }
            else if (!_settingFK)
            {
                PromotionStrategy = null;
            }
        }
    
        private void FixupBundle(Bundle previousValue)
        {
            if (previousValue != null && previousValue.CartItems.Contains(this))
            {
                previousValue.CartItems.Remove(this);
            }
    
            if (Bundle != null)
            {
                if (!Bundle.CartItems.Contains(this))
                {
                    Bundle.CartItems.Add(this);
                }
                if (BundleID != Bundle.BundleID)
                {
                    BundleID = Bundle.BundleID;
                }
            }
            else if (!_settingFK)
            {
                BundleID = null;
            }
        }

        #endregion

    }
}
