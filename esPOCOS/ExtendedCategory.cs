//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class ExtendedCategory
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string StoreID
        {
            get { return _storeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_storeID != value)
                    {
                        if (ProductCategory != null && ProductCategory.Storeid != value)
                        {
                            var previousValue = _productCategory;
                            _productCategory = null;
                            FixupProductCategory(previousValue, skipKeys: true);
                        }
                        _storeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _storeID;
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CategoryID
        {
            get { return _categoryID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_categoryID != value)
                    {
                        if (ProductCategory != null && ProductCategory.CategoryID != value)
                        {
                            var previousValue = _productCategory;
                            _productCategory = null;
                            FixupProductCategory(previousValue, skipKeys: true);
                        }
                        _categoryID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _categoryID;
    
        public virtual Nullable<System.DateTime> CreatedDate
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   
    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(ExtendedCategory); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual ProductCategory ProductCategory
        {
            get { return _productCategory; }
            set
            {
                if (!ReferenceEquals(_productCategory, value))
                {
                    var previousValue = _productCategory;
                    _productCategory = value;
                    FixupProductCategory(previousValue);
                }
            }
        }
        private ProductCategory _productCategory;
    
        public virtual ICollection<ProductCategroyMapping> ProductCategroyMappings
        {
            get
            {
                if (_productCategroyMappings == null)
                {
                    var newCollection = new FixupCollection<ProductCategroyMapping>();
                    newCollection.CollectionChanged += FixupProductCategroyMappings;
                    _productCategroyMappings = newCollection;
                }
                return _productCategroyMappings;
            }
            set
            {
                if (!ReferenceEquals(_productCategroyMappings, value))
                {
                    var previousValue = _productCategroyMappings as FixupCollection<ProductCategroyMapping>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductCategroyMappings;
                    }
                    _productCategroyMappings = value;
                    var newValue = value as FixupCollection<ProductCategroyMapping>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductCategroyMappings;
                    }
                }
            }
        }
        private ICollection<ProductCategroyMapping> _productCategroyMappings;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupProductCategory(ProductCategory previousValue, bool skipKeys = false)
        {
            if (previousValue != null && previousValue.ExtendedCategories.Contains(this))
            {
                previousValue.ExtendedCategories.Remove(this);
            }
    
            if (ProductCategory != null)
            {
                if (!ProductCategory.ExtendedCategories.Contains(this))
                {
                    ProductCategory.ExtendedCategories.Add(this);
                }
                if (StoreID != ProductCategory.Storeid)
                {
                    StoreID = ProductCategory.Storeid;
                }
                if (CategoryID != ProductCategory.CategoryID)
                {
                    CategoryID = ProductCategory.CategoryID;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                StoreID = null;
                CategoryID = null;
            }
        }
    
        private void FixupProductCategroyMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductCategroyMapping item in e.NewItems)
                {
                    item.ExtendedCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductCategroyMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.ExtendedCategory, this))
                    {
                        item.ExtendedCategory = null;
                    }
                }
            }
        }

        #endregion

    }
}
