//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class GiftActivity
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int GiftId
        {
            get;
            set;
        }
    
        public virtual string GiftName
        {
            get;
            set;
        }
    
        public virtual string GiftDescription
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Probability
        {
            get;
            set;
        }
    
        public virtual string ImageUrl
        {
            get;
            set;
        }
    
        public virtual Nullable<int> AdvId
        {
            get { return _advId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_advId != value)
                    {
                        if (Advertisement != null && Advertisement.id != value)
                        {
                            var previousValue = _advertisement;
                            _advertisement = null;
                            FixupAdvertisement(previousValue, skipKeys: true);
                        }
                        _advId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _advId;
    
        public virtual string Storeid
        {
            get { return _storeid; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_storeid != value)
                    {
                        if (Advertisement != null && Advertisement.StoreID != value)
                        {
                            var previousValue = _advertisement;
                            _advertisement = null;
                            FixupAdvertisement(previousValue, skipKeys: true);
                        }
                        _storeid = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _storeid;
    
        public virtual Nullable<int> MaxNumber
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   
    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(GiftActivity); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual Advertisement Advertisement
        {
            get { return _advertisement; }
            set
            {
                if (!ReferenceEquals(_advertisement, value))
                {
                    var previousValue = _advertisement;
                    _advertisement = value;
                    FixupAdvertisement(previousValue);
                }
            }
        }
        private Advertisement _advertisement;
    
        public virtual ICollection<GiftLog> GiftLogs
        {
            get
            {
                if (_giftLogs == null)
                {
                    var newCollection = new FixupCollection<GiftLog>();
                    newCollection.CollectionChanged += FixupGiftLogs;
                    _giftLogs = newCollection;
                }
                return _giftLogs;
            }
            set
            {
                if (!ReferenceEquals(_giftLogs, value))
                {
                    var previousValue = _giftLogs as FixupCollection<GiftLog>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGiftLogs;
                    }
                    _giftLogs = value;
                    var newValue = value as FixupCollection<GiftLog>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGiftLogs;
                    }
                }
            }
        }
        private ICollection<GiftLog> _giftLogs;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAdvertisement(Advertisement previousValue, bool skipKeys = false)
        {
            if (previousValue != null && previousValue.GiftActivities.Contains(this))
            {
                previousValue.GiftActivities.Remove(this);
            }
    
            if (Advertisement != null)
            {
                if (!Advertisement.GiftActivities.Contains(this))
                {
                    Advertisement.GiftActivities.Add(this);
                }
                if (AdvId != Advertisement.id)
                {
                    AdvId = Advertisement.id;
                }
                if (Storeid != Advertisement.StoreID)
                {
                    Storeid = Advertisement.StoreID;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                AdvId = null;
                Storeid = null;
            }
        }
    
        private void FixupGiftLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GiftLog item in e.NewItems)
                {
                    item.GiftActivity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GiftLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.GiftActivity, this))
                    {
                        item.GiftActivity = null;
                    }
                }
            }
        }

        #endregion

    }
}
