//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class GiftLog
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual System.Guid LogId
        {
            get;
            set;
        }
    
        public virtual string IP
        {
            get;
            set;
        }
    
        public virtual string UserId
        {
            get;
            set;
        }
    
        public virtual Nullable<int> GiftId
        {
            get { return _giftId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_giftId != value)
                    {
                        if (GiftActivity != null && GiftActivity.GiftId != value)
                        {
                            GiftActivity = null;
                        }
                        _giftId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _giftId;
    
        public virtual Nullable<bool> LogStatuse
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CreateDate
        {
            get;
            set;
        }
    
        public virtual string Storeid
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> HasSend
        {
            get;
            set;
        }
    
        public virtual Nullable<int> AdvId
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   
    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(GiftLog); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual GiftActivity GiftActivity
        {
            get { return _giftActivity; }
            set
            {
                if (!ReferenceEquals(_giftActivity, value))
                {
                    var previousValue = _giftActivity;
                    _giftActivity = value;
                    FixupGiftActivity(previousValue);
                }
            }
        }
        private GiftActivity _giftActivity;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupGiftActivity(GiftActivity previousValue)
        {
            if (previousValue != null && previousValue.GiftLogs.Contains(this))
            {
                previousValue.GiftLogs.Remove(this);
            }
    
            if (GiftActivity != null)
            {
                if (!GiftActivity.GiftLogs.Contains(this))
                {
                    GiftActivity.GiftLogs.Add(this);
                }
                if (GiftId != GiftActivity.GiftId)
                {
                    GiftId = GiftActivity.GiftId;
                }
            }
            else if (!_settingFK)
            {
                GiftId = null;
            }
        }

        #endregion

    }
}
