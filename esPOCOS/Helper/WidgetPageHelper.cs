using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using eStore.POCOS.DAL;
using eStore.Utilities;

namespace eStore.POCOS.DAL
{

    public partial class WidgetPageHelper : Helper
    {
        #region Business Read

        /// <summary>
        ///  WidgetID is generated by Database, return widget base on widgetPageID
        /// </summary>
        /// <param name="widgetpageid"></param>
        /// <returns></returns>

        public WidgetPage  getWidgetPageByID(int widgetpageid)
        {
            try
            {
                var _widget = (from wp in context.WidgetPages
                                   where wp.WidgetPageID == widgetpageid 
                                   select wp).FirstOrDefault();

                if (_widget != null)
                    _widget.helper = this;

                return _widget;

            }
            catch (Exception ex)
            {

                eStoreLoger.Fatal(ex.Message, "", "", "", ex);
                return null;
            }
        }


   /// <summary>
   /// 
   /// </summary>
   /// <param name="widgetid"></param>
   /// <returns></returns>

        public Widget getWidgetByID(int widgetid)
        {
            try
            {
                var _widget = (from wp in context.Widgets
                               where wp.WidgetID == widgetid
                               select wp).FirstOrDefault();           

                return _widget;

            }
            catch (Exception ex)
            {

                eStoreLoger.Fatal(ex.Message, "", "", "", ex);
                return null;
            }
        }

        /// <summary>
        /// Widget page name is the name user specifies when the widget package is uploaded
        /// </summary>
        /// <param name="widgetPageName"></param>
        /// <returns></returns>
        public WidgetPage getWidgetPageByName(String widgetPageName)
        {
            try
            {
                widgetPageName = widgetPageName.ToUpper();
                var _widget = (from wp in context.WidgetPages
                               where wp.PageName.ToUpper() == widgetPageName
                               select wp).FirstOrDefault();

                if (_widget != null)
                    _widget.helper = this;
          
                return _widget;
            }
            catch (Exception ex)
            {
                eStoreLoger.Fatal(ex.Message, "", "", "", ex);
                return null;
            }
        }

        public WidgetPage getWidgetPageByName(String widgetPageName,string StoreID)
        {
            try
            {
                widgetPageName = widgetPageName.ToUpper();
                var _widget = (from wp in context.WidgetPages
                               where wp.PageName.ToUpper() == widgetPageName && wp.StoreID == StoreID
                               select wp).FirstOrDefault();

                if (_widget != null)
                    _widget.helper = this;

                return _widget;
            }
            catch (Exception ex)
            {
                eStoreLoger.Fatal(ex.Message, "", "", "", ex);
                return null;
            }
        }
        /// <summary>
        /// Return all Widget pages in given store
        /// </summary>
        /// <param name="storeid"></param>
        /// <returns></returns>
         
        public List<WidgetPage> getWidgetsByStore(string storeid)
        {
            if (String.IsNullOrEmpty(storeid)) return null;

            try
            {

                var _widgets = (from wp in context.WidgetPages.Include("Widgets")
                               where wp.StoreID == storeid
                               select wp);
                return _widgets.ToList();
                
            }
            catch (Exception ex)
            {
                eStoreLoger.Fatal(ex.Message, "", "", "", ex);
                return null;
            }
        }




    
        #endregion

        #region Creat Update Delete


        public int save(WidgetPage widgetpage)
        {
            //if parameter is null or validation is false, then return  -1 
            if (widgetpage == null || widgetpage.validate() == false) return 1;

            //Try to retrieve object from DB  
            WidgetPage _exist_widget = getWidgetPageByID(widgetpage.WidgetPageID);

            try
            {

                if (_exist_widget == null)
                {
                    context.WidgetPages.AddObject(widgetpage); //state=added.
                    context.SaveChanges();
                    return 0;
                }
                else //Update 
                {
                    context.WidgetPages.ApplyCurrentValues(widgetpage);               
                    context.SaveChanges();
                    return 0;
                }


            }
            catch (Exception ex)
            {
                eStoreLoger.Fatal(ex.Message, "", "", "", ex);
                return -5000;
            }

        }
 

        public int delete(WidgetPage widgetpage)
        {
            if (widgetpage == null || widgetpage.validate() == false) return 1;

            WidgetPage w = getWidgetPageByID(widgetpage.WidgetPageID);

            try
            {
                context.DeleteObject(w);
                context.SaveChanges();
                return 0;
            }
            catch (Exception ex)
            {
                eStoreLoger.Fatal(ex.Message, "", "", "", ex);
                return -5000;
            }
        }

        /// <summary>
        /// Delete single widget.
        /// </summary>
        /// <param name="widget"></param>
        /// <returns></returns>

        public int delete(Widget widget)
        {
            if (widget == null || widget.validate() == false) return 1;

            Widget w = getWidgetByID (widget.WidgetID);

            try
            {
                context.Widgets.DeleteObject(w);
                context.SaveChanges();
                return 0;
            }
            catch (Exception ex)
            {
                eStoreLoger.Fatal(ex.Message, "", "", "", ex);
                return -5000;
            }
        }

        #endregion

        #region Others

        private static string myclassname()
        {
            return typeof(WidgetPageHelper ).ToString();
        }
        #endregion
    }
}