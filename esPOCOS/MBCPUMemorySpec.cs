//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class MBCPUMemorySpec
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string PartNo
        {
            get;
            set;
        }
    
        public virtual string TDP
        {
            get;
            set;
        }
    
        public virtual string CPUSocket
        {
            get;
            set;
        }
    
        public virtual string FSB
        {
            get;
            set;
        }
    
        public virtual string Chipset
        {
            get;
            set;
        }
    
        public virtual string CPU
        {
            get;
            set;
        }
    
        public virtual string BIOS
        {
            get;
            set;
        }
    
        public virtual string SSpec
        {
            get;
            set;
        }
    
        public virtual string MemoryInterface
        {
            get;
            set;
        }
    
        public virtual string MemoryType
        {
            get;
            set;
        }
    
        public virtual string MemorySpeed
        {
            get;
            set;
        }
    
        public virtual int MaxCapacity
        {
            get;
            set;
        }
    
        public virtual string MaxCapacityUnit
        {
            get;
            set;
        }
    
        public virtual int AvailableCapacity
        {
            get;
            set;
        }
    
        public virtual string AvailableCapacityUnit
        {
            get;
            set;
        }
    
        public virtual string MemorySocket
        {
            get;
            set;
        }
    
        public virtual int Onboard
        {
            get;
            set;
        }
    
        public virtual string OnboardUnit
        {
            get;
            set;
        }
    
        public virtual int Slot
        {
            get;
            set;
        }
    
        public virtual int AvailableSlot
        {
            get;
            set;
        }
    
        public virtual string CodeName
        {
            get;
            set;
        }
    
        public virtual string ModelName
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (PartNo == null) {
						 error_message.Add(new ErrorMessage("PartNo", "PartNo can not be Null "));
				}
		 if (TDP == null) {
						 error_message.Add(new ErrorMessage("TDP", "TDP can not be Null "));
				}
		 if (CPUSocket == null) {
						 error_message.Add(new ErrorMessage("CPUSocket", "CPUSocket can not be Null "));
				}
		 if (FSB == null) {
						 error_message.Add(new ErrorMessage("FSB", "FSB can not be Null "));
				}
		 if (Chipset == null) {
						 error_message.Add(new ErrorMessage("Chipset", "Chipset can not be Null "));
				}
		 if (CPU == null) {
						 error_message.Add(new ErrorMessage("CPU", "CPU can not be Null "));
				}
		 if (BIOS == null) {
						 error_message.Add(new ErrorMessage("BIOS", "BIOS can not be Null "));
				}
		 if (SSpec == null) {
						 error_message.Add(new ErrorMessage("SSpec", "SSpec can not be Null "));
				}
		 if (MemoryInterface == null) {
						 error_message.Add(new ErrorMessage("MemoryInterface", "MemoryInterface can not be Null "));
				}
		 if (MemoryType == null) {
						 error_message.Add(new ErrorMessage("MemoryType", "MemoryType can not be Null "));
				}
		 if (MemorySpeed == null) {
						 error_message.Add(new ErrorMessage("MemorySpeed", "MemorySpeed can not be Null "));
				}
		 if (MaxCapacityUnit == null) {
						 error_message.Add(new ErrorMessage("MaxCapacityUnit", "MaxCapacityUnit can not be Null "));
				}
		 if (AvailableCapacityUnit == null) {
						 error_message.Add(new ErrorMessage("AvailableCapacityUnit", "AvailableCapacityUnit can not be Null "));
				}
		 if (MemorySocket == null) {
						 error_message.Add(new ErrorMessage("MemorySocket", "MemorySocket can not be Null "));
				}
		 if (OnboardUnit == null) {
						 error_message.Add(new ErrorMessage("OnboardUnit", "OnboardUnit can not be Null "));
				}
		 if (CodeName == null) {
						 error_message.Add(new ErrorMessage("CodeName", "CodeName can not be Null "));
				}
		 if (ModelName == null) {
						 error_message.Add(new ErrorMessage("ModelName", "ModelName can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(MBCPUMemorySpec); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual ICollection<MBPeripherialBlackList> MBPeripherialBlackLists
        {
            get
            {
                if (_mBPeripherialBlackLists == null)
                {
                    var newCollection = new FixupCollection<MBPeripherialBlackList>();
                    newCollection.CollectionChanged += FixupMBPeripherialBlackLists;
                    _mBPeripherialBlackLists = newCollection;
                }
                return _mBPeripherialBlackLists;
            }
            set
            {
                if (!ReferenceEquals(_mBPeripherialBlackLists, value))
                {
                    var previousValue = _mBPeripherialBlackLists as FixupCollection<MBPeripherialBlackList>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMBPeripherialBlackLists;
                    }
                    _mBPeripherialBlackLists = value;
                    var newValue = value as FixupCollection<MBPeripherialBlackList>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMBPeripherialBlackLists;
                    }
                }
            }
        }
        private ICollection<MBPeripherialBlackList> _mBPeripherialBlackLists;

        #endregion

        #region Association Fixup
    
        private void FixupMBPeripherialBlackLists(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MBPeripherialBlackList item in e.NewItems)
                {
                    item.MBCPUMemorySpec = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MBPeripherialBlackList item in e.OldItems)
                {
                    if (ReferenceEquals(item.MBCPUMemorySpec, this))
                    {
                        item.MBCPUMemorySpec = null;
                    }
                }
            }
        }

        #endregion

    }
}
