//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class Menu
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int MenuID
        {
            get { return _menuID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_menuID != value)
                    {
                        if (Menu3 != null && Menu3.MenuID != value)
                        {
                            Menu3 = null;
                        }
                        _menuID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _menuID;
    
        public virtual string StoreID
        {
            get { return _storeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_storeID != value)
                    {
                        if (Store != null && Store.StoreID != value)
                        {
                            Store = null;
                        }
                        if (ParentMenu != null && ParentMenu.StoreID != value)
                        {
                            var previousValue = _parentMenu;
                            _parentMenu = null;
                            FixupParentMenu(previousValue, skipKeys: true);
                        }
                        if (Menu3 != null && Menu3.StoreID != value)
                        {
                            Menu3 = null;
                        }
                        _storeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _storeID;
    
        public virtual string ProductCategoryVersion
        {
            get;
            set;
        }
    
        public virtual string MenuName
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ParentMenuID
        {
            get { return _parentMenuID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentMenuID != value)
                    {
                        if (ParentMenu != null && ParentMenu.MenuID != value)
                        {
                            var previousValue = _parentMenu;
                            _parentMenu = null;
                            FixupParentMenu(previousValue, skipKeys: true);
                        }
                        _parentMenuID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _parentMenuID;
    
        public virtual string DisplayType
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CategoryID
        {
            get;
            set;
        }
    
        public virtual string CategoryPath
        {
            get;
            set;
        }
    
        public virtual string MenuType
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> Publish
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Sequence
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ConditionId
        {
            get { return _conditionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_conditionId != value)
                    {
                        if (RuleSet != null && RuleSet.RuleSetID != value)
                        {
                            RuleSet = null;
                        }
                        _conditionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _conditionId;
    
        public virtual string URL
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> InsertDate
        {
            get;
            set;
        }
    
        public virtual string Position
        {
            get;
            set;
        }
    
        public virtual string Target
        {
            get;
            set;
        }
    
        public virtual Nullable<int> MiniSiteID
        {
            get { return _miniSiteID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_miniSiteID != value)
                    {
                        if (MiniSite != null && MiniSite.ID != value)
                        {
                            MiniSite = null;
                        }
                        _miniSiteID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _miniSiteID;
    
        public virtual string StoreUrl
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (StoreID == null) {
						 error_message.Add(new ErrorMessage("StoreID", "StoreID can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(Menu); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual Store Store
        {
            get { return _store; }
            set
            {
                if (!ReferenceEquals(_store, value))
                {
                    var previousValue = _store;
                    _store = value;
                    FixupStore(previousValue);
                }
            }
        }
        private Store _store;
    
        public virtual ICollection<Menu> SubMenus
        {
            get
            {
                if (_subMenus == null)
                {
                    var newCollection = new FixupCollection<Menu>();
                    newCollection.CollectionChanged += FixupSubMenus;
                    _subMenus = newCollection;
                }
                return _subMenus;
            }
            set
            {
                if (!ReferenceEquals(_subMenus, value))
                {
                    var previousValue = _subMenus as FixupCollection<Menu>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubMenus;
                    }
                    _subMenus = value;
                    var newValue = value as FixupCollection<Menu>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubMenus;
                    }
                }
            }
        }
        private ICollection<Menu> _subMenus;
    
        public virtual Menu ParentMenu
        {
            get { return _parentMenu; }
            set
            {
                if (!ReferenceEquals(_parentMenu, value))
                {
                    var previousValue = _parentMenu;
                    _parentMenu = value;
                    FixupParentMenu(previousValue);
                }
            }
        }
        private Menu _parentMenu;
    
        public virtual Menu Menu11
        {
            get { return _menu11; }
            set
            {
                if (!ReferenceEquals(_menu11, value))
                {
                    var previousValue = _menu11;
                    _menu11 = value;
                    FixupMenu11(previousValue);
                }
            }
        }
        private Menu _menu11;
    
        public virtual Menu Menu3
        {
            get { return _menu3; }
            set
            {
                if (!ReferenceEquals(_menu3, value))
                {
                    var previousValue = _menu3;
                    _menu3 = value;
                    FixupMenu3(previousValue);
                }
            }
        }
        private Menu _menu3;
    
        public virtual RuleSet RuleSet
        {
            get { return _ruleSet; }
            set
            {
                if (!ReferenceEquals(_ruleSet, value))
                {
                    var previousValue = _ruleSet;
                    _ruleSet = value;
                    FixupRuleSet(previousValue);
                }
            }
        }
        private RuleSet _ruleSet;
    
        public virtual MiniSite MiniSite
        {
            get { return _miniSite; }
            set
            {
                if (!ReferenceEquals(_miniSite, value))
                {
                    var previousValue = _miniSite;
                    _miniSite = value;
                    FixupMiniSite(previousValue);
                }
            }
        }
        private MiniSite _miniSite;
    
        public virtual ICollection<MenuGlobalResource> MenuGlobalResources
        {
            get
            {
                if (_menuGlobalResources == null)
                {
                    var newCollection = new FixupCollection<MenuGlobalResource>();
                    newCollection.CollectionChanged += FixupMenuGlobalResources;
                    _menuGlobalResources = newCollection;
                }
                return _menuGlobalResources;
            }
            set
            {
                if (!ReferenceEquals(_menuGlobalResources, value))
                {
                    var previousValue = _menuGlobalResources as FixupCollection<MenuGlobalResource>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMenuGlobalResources;
                    }
                    _menuGlobalResources = value;
                    var newValue = value as FixupCollection<MenuGlobalResource>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMenuGlobalResources;
                    }
                }
            }
        }
        private ICollection<MenuGlobalResource> _menuGlobalResources;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupStore(Store previousValue)
        {
            if (previousValue != null && previousValue.Menus.Contains(this))
            {
                previousValue.Menus.Remove(this);
            }
    
            if (Store != null)
            {
                if (!Store.Menus.Contains(this))
                {
                    Store.Menus.Add(this);
                }
                if (StoreID != Store.StoreID)
                {
                    StoreID = Store.StoreID;
                }
            }
        }
    
        private void FixupParentMenu(Menu previousValue, bool skipKeys = false)
        {
            if (previousValue != null && previousValue.SubMenus.Contains(this))
            {
                previousValue.SubMenus.Remove(this);
            }
    
            if (ParentMenu != null)
            {
                if (!ParentMenu.SubMenus.Contains(this))
                {
                    ParentMenu.SubMenus.Add(this);
                }
                if (ParentMenuID != ParentMenu.MenuID)
                {
                    ParentMenuID = ParentMenu.MenuID;
                }
                if (StoreID != ParentMenu.StoreID)
                {
                    StoreID = ParentMenu.StoreID;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                ParentMenuID = null;
            }
        }
    
        private void FixupMenu11(Menu previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Menu3, this))
            {
                previousValue.Menu3 = null;
            }
    
            if (Menu11 != null)
            {
                Menu11.Menu3 = this;
            }
        }
    
        private void FixupMenu3(Menu previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Menu11, this))
            {
                previousValue.Menu11 = null;
            }
    
            if (Menu3 != null)
            {
                Menu3.Menu11 = this;
                if (MenuID != Menu3.MenuID)
                {
                    MenuID = Menu3.MenuID;
                }
                if (StoreID != Menu3.StoreID)
                {
                    StoreID = Menu3.StoreID;
                }
            }
        }
    
        private void FixupRuleSet(RuleSet previousValue)
        {
            if (previousValue != null && previousValue.Menus.Contains(this))
            {
                previousValue.Menus.Remove(this);
            }
    
            if (RuleSet != null)
            {
                if (!RuleSet.Menus.Contains(this))
                {
                    RuleSet.Menus.Add(this);
                }
                if (ConditionId != RuleSet.RuleSetID)
                {
                    ConditionId = RuleSet.RuleSetID;
                }
            }
            else if (!_settingFK)
            {
                ConditionId = null;
            }
        }
    
        private void FixupMiniSite(MiniSite previousValue)
        {
            if (MiniSite != null)
            {
                if (MiniSiteID != MiniSite.ID)
                {
                    MiniSiteID = MiniSite.ID;
                }
            }
            else if (!_settingFK)
            {
                MiniSiteID = null;
            }
        }
    
        private void FixupSubMenus(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Menu item in e.NewItems)
                {
                    item.ParentMenu = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Menu item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentMenu, this))
                    {
                        item.ParentMenu = null;
                    }
                }
            }
        }
    
        private void FixupMenuGlobalResources(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MenuGlobalResource item in e.NewItems)
                {
                    item.Menu = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MenuGlobalResource item in e.OldItems)
                {
                    if (ReferenceEquals(item.Menu, this))
                    {
                        item.Menu = null;
                    }
                }
            }
        }

        #endregion

    }
}
