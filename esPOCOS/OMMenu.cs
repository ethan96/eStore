//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class OMMenu
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ParentID
        {
            get { return _parentID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentID != value)
                    {
                        if (ParentMenu != null && ParentMenu.ID != value)
                        {
                            ParentMenu = null;
                        }
                        _parentID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _parentID;
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual string ActionURL
        {
            get;
            set;
        }
    
        public virtual string AccessRight
        {
            get;
            set;
        }
    
        public virtual Nullable<int> MiniSiteID
        {
            get { return _miniSiteID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_miniSiteID != value)
                    {
                        if (MiniSite != null && MiniSite.ID != value)
                        {
                            MiniSite = null;
                        }
                        _miniSiteID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _miniSiteID;

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (Name == null) {
						 error_message.Add(new ErrorMessage("Name", "Name can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(OMMenu); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual ICollection<OMMenu> SubMenus
        {
            get
            {
                if (_subMenus == null)
                {
                    var newCollection = new FixupCollection<OMMenu>();
                    newCollection.CollectionChanged += FixupSubMenus;
                    _subMenus = newCollection;
                }
                return _subMenus;
            }
            set
            {
                if (!ReferenceEquals(_subMenus, value))
                {
                    var previousValue = _subMenus as FixupCollection<OMMenu>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubMenus;
                    }
                    _subMenus = value;
                    var newValue = value as FixupCollection<OMMenu>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubMenus;
                    }
                }
            }
        }
        private ICollection<OMMenu> _subMenus;
    
        public virtual OMMenu ParentMenu
        {
            get { return _parentMenu; }
            set
            {
                if (!ReferenceEquals(_parentMenu, value))
                {
                    var previousValue = _parentMenu;
                    _parentMenu = value;
                    FixupParentMenu(previousValue);
                }
            }
        }
        private OMMenu _parentMenu;
    
        public virtual ICollection<AdminAuth> AdminAuths
        {
            get
            {
                if (_adminAuths == null)
                {
                    var newCollection = new FixupCollection<AdminAuth>();
                    newCollection.CollectionChanged += FixupAdminAuths;
                    _adminAuths = newCollection;
                }
                return _adminAuths;
            }
            set
            {
                if (!ReferenceEquals(_adminAuths, value))
                {
                    var previousValue = _adminAuths as FixupCollection<AdminAuth>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAdminAuths;
                    }
                    _adminAuths = value;
                    var newValue = value as FixupCollection<AdminAuth>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAdminAuths;
                    }
                }
            }
        }
        private ICollection<AdminAuth> _adminAuths;
    
        public virtual MiniSite MiniSite
        {
            get { return _miniSite; }
            set
            {
                if (!ReferenceEquals(_miniSite, value))
                {
                    var previousValue = _miniSite;
                    _miniSite = value;
                    FixupMiniSite(previousValue);
                }
            }
        }
        private MiniSite _miniSite;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupParentMenu(OMMenu previousValue)
        {
            if (previousValue != null && previousValue.SubMenus.Contains(this))
            {
                previousValue.SubMenus.Remove(this);
            }
    
            if (ParentMenu != null)
            {
                if (!ParentMenu.SubMenus.Contains(this))
                {
                    ParentMenu.SubMenus.Add(this);
                }
                if (ParentID != ParentMenu.ID)
                {
                    ParentID = ParentMenu.ID;
                }
            }
            else if (!_settingFK)
            {
                ParentID = null;
            }
        }
    
        private void FixupMiniSite(MiniSite previousValue)
        {
            if (MiniSite != null)
            {
                if (MiniSiteID != MiniSite.ID)
                {
                    MiniSiteID = MiniSite.ID;
                }
            }
            else if (!_settingFK)
            {
                MiniSiteID = null;
            }
        }
    
        private void FixupSubMenus(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OMMenu item in e.NewItems)
                {
                    item.ParentMenu = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OMMenu item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentMenu, this))
                    {
                        item.ParentMenu = null;
                    }
                }
            }
        }
    
        private void FixupAdminAuths(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AdminAuth item in e.NewItems)
                {
                    item.OMMenu = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AdminAuth item in e.OldItems)
                {
                    if (ReferenceEquals(item.OMMenu, this))
                    {
                        item.OMMenu = null;
                    }
                }
            }
        }

        #endregion

    }
}
