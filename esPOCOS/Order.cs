//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class Order
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual string StoreID
        {
            get { return _storeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_storeID != value)
                    {
                        if (Cart != null && Cart.StoreID != value)
                        {
                            Cart = null;
                        }
                        _storeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _storeID;
    
        public virtual string CartID
        {
            get { return _cartID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_cartID != value)
                    {
                        if (Cart != null && Cart.CartID != value)
                        {
                            Cart = null;
                        }
                        _cartID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _cartID;
    
        public virtual string OrderNo
        {
            get;
            set;
        }
    
        public virtual string OrderType
        {
            get;
            set;
        }
    
        public virtual string PurchaseNO
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> OrderDate
        {
            get;
            set;
        }
    
        public virtual string PaymentType
        {
            get;
            set;
        }
    
        public virtual string PartialFlag
        {
            get;
            set;
        }
    
        public virtual string CombineOrderFlag
        {
            get;
            set;
        }
    
        public virtual string Remark
        {
            get;
            set;
        }
    
        public virtual string DeliveryPlant
        {
            get;
            set;
        }
    
        public virtual string ShipVia
        {
            get;
            set;
        }
    
        public virtual string OrderNote
        {
            get;
            set;
        }
    
        public virtual string OrderStatus
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastUpdated
        {
            get;
            set;
        }
    
        public virtual string AutoOrderFlag
        {
            get;
            set;
        }
    
        public virtual string PaymentID
        {
            get;
            set;
        }
    
        public virtual string ResellerID
        {
            get;
            set;
        }
    
        public virtual string CustomerComment
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ChannelID
        {
            get;
            set;
        }
    
        public virtual string ChannelName
        {
            get;
            set;
        }
    
        public virtual string Courier
        {
            get;
            set;
        }
    
        public virtual string CourierAccount
        {
            get;
            set;
        }
    
        public virtual string CourierPhone
        {
            get;
            set;
        }
    
        public virtual string ShippingMethod
        {
            get;
            set;
        }
    
        public virtual string ZM
        {
            get;
            set;
        }
    
        public virtual string Z2
        {
            get;
            set;
        }
    
        public virtual string SalesID
        {
            get;
            set;
        }
    
        public virtual string SAPSyncBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> SAPSyncDate
        {
            get;
            set;
        }
    
        public virtual string SAPSyncStatus
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> TDSCost
        {
            get;
            set;
        }
    
        public virtual string ShipmentTerm
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> EarlyShipFlag
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Freight
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Insurance
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Tax
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> TaxRate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DueDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> RequiredDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ConfirmedDate
        {
            get;
            set;
        }
    
        public virtual string ConfirmedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> TotalAmount
        {
            get;
            set;
        }
    
        public virtual string VATAddress
        {
            get;
            set;
        }
    
        public virtual string VATNumbe
        {
            get;
            set;
        }
    
        public virtual string UserID
        {
            get { return _userID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userID != value)
                    {
                        if (User != null && User.UserID != value)
                        {
                            User = null;
                        }
                        _userID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _userID;
    
        public virtual string Source
        {
            get;
            set;
        }
    
        public virtual string PromoteCode
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> TotalDiscount
        {
            get;
            set;
        }
    
        public virtual string LocalCurrency
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> LocalCurExchangeRate
        {
            get;
            set;
        }
    
        public virtual string LastUpdateBy
        {
            get;
            set;
        }
    
        public virtual string PurchaseOrderFile
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> FreightDiscount
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> TaxDiscount
        {
            get;
            set;
        }
    
        public virtual string ResellerCertificate
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> DutyAndTax
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> TaxAndFees
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> VATTax
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> OtherTaxAndFees
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Surcharge
        {
            get;
            set;
        }
    
        public virtual string RegistrationNumber
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (StoreID == null) {
						 error_message.Add(new ErrorMessage("StoreID", "StoreID can not be Null "));
				}
		 if (CartID == null) {
						 error_message.Add(new ErrorMessage("CartID", "CartID can not be Null "));
				}
		 if (OrderNo == null) {
						 error_message.Add(new ErrorMessage("OrderNo", "OrderNo can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(Order); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual Cart Cart
        {
            get { return _cart; }
            set
            {
                if (!ReferenceEquals(_cart, value))
                {
                    var previousValue = _cart;
                    _cart = value;
                    FixupCart(previousValue);
                }
            }
        }
        private Cart _cart;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual ICollection<Payment> Payments
        {
            get
            {
                if (_payments == null)
                {
                    var newCollection = new FixupCollection<Payment>();
                    newCollection.CollectionChanged += FixupPayments;
                    _payments = newCollection;
                }
                return _payments;
            }
            set
            {
                if (!ReferenceEquals(_payments, value))
                {
                    var previousValue = _payments as FixupCollection<Payment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPayments;
                    }
                    _payments = value;
                    var newValue = value as FixupCollection<Payment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPayments;
                    }
                }
            }
        }
        private ICollection<Payment> _payments;
    
        public virtual OrderSyncedRecord OrderSyncedRecord
        {
            get { return _orderSyncedRecord; }
            set
            {
                if (!ReferenceEquals(_orderSyncedRecord, value))
                {
                    var previousValue = _orderSyncedRecord;
                    _orderSyncedRecord = value;
                    FixupOrderSyncedRecord(previousValue);
                }
            }
        }
        private OrderSyncedRecord _orderSyncedRecord;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCart(Cart previousValue)
        {
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Cart != null)
            {
                if (!Cart.Orders.Contains(this))
                {
                    Cart.Orders.Add(this);
                }
                if (CartID != Cart.CartID)
                {
                    CartID = Cart.CartID;
                }
                if (StoreID != Cart.StoreID)
                {
                    StoreID = Cart.StoreID;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (User != null)
            {
                if (UserID != User.UserID)
                {
                    UserID = User.UserID;
                }
            }
            else if (!_settingFK)
            {
                UserID = null;
            }
        }
    
        private void FixupOrderSyncedRecord(OrderSyncedRecord previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Order, this))
            {
                previousValue.Order = null;
            }
    
            if (OrderSyncedRecord != null)
            {
                OrderSyncedRecord.Order = this;
            }
        }
    
        private void FixupPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Payment item in e.NewItems)
                {
                    item.Order = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Payment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Order, this))
                    {
                        item.Order = null;
                    }
                }
            }
        }

        #endregion

    }
}
