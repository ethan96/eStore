//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class PStore
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Url
        {
            get;
            set;
        }
    
        public virtual int DefaultLanguageId
        {
            get { return _defaultLanguageId; }
            set
            {
                if (_defaultLanguageId != value)
                {
                    if (Language != null && Language.Id != value)
                    {
                        Language = null;
                    }
                    _defaultLanguageId = value;
                }
            }
        }
        private int _defaultLanguageId;
    
        public virtual string MetaKeyword
        {
            get;
            set;
        }
    
        public virtual string MetaTitle
        {
            get;
            set;
        }
    
        public virtual string MetaDescription
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (Name == null) {
						 error_message.Add(new ErrorMessage("Name", "Name can not be Null "));
				}
		 if (Url == null) {
						 error_message.Add(new ErrorMessage("Url", "Url can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(PStore); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual ICollection<StoreProductCategory> StoreProductCategories
        {
            get
            {
                if (_storeProductCategories == null)
                {
                    var newCollection = new FixupCollection<StoreProductCategory>();
                    newCollection.CollectionChanged += FixupStoreProductCategories;
                    _storeProductCategories = newCollection;
                }
                return _storeProductCategories;
            }
            set
            {
                if (!ReferenceEquals(_storeProductCategories, value))
                {
                    var previousValue = _storeProductCategories as FixupCollection<StoreProductCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreProductCategories;
                    }
                    _storeProductCategories = value;
                    var newValue = value as FixupCollection<StoreProductCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreProductCategories;
                    }
                }
            }
        }
        private ICollection<StoreProductCategory> _storeProductCategories;
    
        public virtual Language Language
        {
            get { return _language; }
            set
            {
                if (!ReferenceEquals(_language, value))
                {
                    var previousValue = _language;
                    _language = value;
                    FixupLanguage(previousValue);
                }
            }
        }
        private Language _language;
    
        public virtual ICollection<StoreProductBundle> StoreProductBundles
        {
            get
            {
                if (_storeProductBundles == null)
                {
                    var newCollection = new FixupCollection<StoreProductBundle>();
                    newCollection.CollectionChanged += FixupStoreProductBundles;
                    _storeProductBundles = newCollection;
                }
                return _storeProductBundles;
            }
            set
            {
                if (!ReferenceEquals(_storeProductBundles, value))
                {
                    var previousValue = _storeProductBundles as FixupCollection<StoreProductBundle>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreProductBundles;
                    }
                    _storeProductBundles = value;
                    var newValue = value as FixupCollection<StoreProductBundle>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreProductBundles;
                    }
                }
            }
        }
        private ICollection<StoreProductBundle> _storeProductBundles;
    
        public virtual ICollection<StoreProduct> StoreProducts
        {
            get
            {
                if (_storeProducts == null)
                {
                    var newCollection = new FixupCollection<StoreProduct>();
                    newCollection.CollectionChanged += FixupStoreProducts;
                    _storeProducts = newCollection;
                }
                return _storeProducts;
            }
            set
            {
                if (!ReferenceEquals(_storeProducts, value))
                {
                    var previousValue = _storeProducts as FixupCollection<StoreProduct>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreProducts;
                    }
                    _storeProducts = value;
                    var newValue = value as FixupCollection<StoreProduct>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreProducts;
                    }
                }
            }
        }
        private ICollection<StoreProduct> _storeProducts;
    
        public virtual ICollection<PStoreProduct> PStoreProducts
        {
            get
            {
                if (_pStoreProducts == null)
                {
                    var newCollection = new FixupCollection<PStoreProduct>();
                    newCollection.CollectionChanged += FixupPStoreProducts;
                    _pStoreProducts = newCollection;
                }
                return _pStoreProducts;
            }
            set
            {
                if (!ReferenceEquals(_pStoreProducts, value))
                {
                    var previousValue = _pStoreProducts as FixupCollection<PStoreProduct>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPStoreProducts;
                    }
                    _pStoreProducts = value;
                    var newValue = value as FixupCollection<PStoreProduct>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPStoreProducts;
                    }
                }
            }
        }
        private ICollection<PStoreProduct> _pStoreProducts;

        #endregion

        #region Association Fixup
    
        private void FixupLanguage(Language previousValue)
        {
            if (previousValue != null && previousValue.Stores.Contains(this))
            {
                previousValue.Stores.Remove(this);
            }
    
            if (Language != null)
            {
                if (!Language.Stores.Contains(this))
                {
                    Language.Stores.Add(this);
                }
                if (DefaultLanguageId != Language.Id)
                {
                    DefaultLanguageId = Language.Id;
                }
            }
        }
    
        private void FixupStoreProductCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreProductCategory item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreProductCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupStoreProductBundles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreProductBundle item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreProductBundle item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupStoreProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreProduct item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreProduct item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupPStoreProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PStoreProduct item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PStoreProduct item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }

        #endregion

    }
}
