//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class PStoreProductCategory
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual string DisplayName
        {
            get;
            set;
        }
    
        public virtual string LargeSizeImageUrl
        {
            get;
            set;
        }
    
        public virtual string MediumSizeImageUrl
        {
            get;
            set;
        }
    
        public virtual string SmallSizeImageUrl
        {
            get;
            set;
        }
    
        public virtual string IconImageUrl
        {
            get;
            set;
        }
    
        public virtual bool Status
        {
            get;
            set;
        }
    
        public virtual bool PublishStatus
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ParentProductCategoryId
        {
            get { return _parentProductCategoryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentProductCategoryId != value)
                    {
                        if (Parent != null && Parent.Id != value)
                        {
                            Parent = null;
                        }
                        _parentProductCategoryId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _parentProductCategoryId;
    
        public virtual Nullable<int> Sequence
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (Name == null) {
						 error_message.Add(new ErrorMessage("Name", "Name can not be Null "));
				}
		 if (Description == null) {
						 error_message.Add(new ErrorMessage("Description", "Description can not be Null "));
				}
		 if (DisplayName == null) {
						 error_message.Add(new ErrorMessage("DisplayName", "DisplayName can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(PStoreProductCategory); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual ICollection<PStoreProductCategory> Children
        {
            get
            {
                if (_children == null)
                {
                    var newCollection = new FixupCollection<PStoreProductCategory>();
                    newCollection.CollectionChanged += FixupChildren;
                    _children = newCollection;
                }
                return _children;
            }
            set
            {
                if (!ReferenceEquals(_children, value))
                {
                    var previousValue = _children as FixupCollection<PStoreProductCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildren;
                    }
                    _children = value;
                    var newValue = value as FixupCollection<PStoreProductCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildren;
                    }
                }
            }
        }
        private ICollection<PStoreProductCategory> _children;
    
        public virtual PStoreProductCategory Parent
        {
            get { return _parent; }
            set
            {
                if (!ReferenceEquals(_parent, value))
                {
                    var previousValue = _parent;
                    _parent = value;
                    FixupParent(previousValue);
                }
            }
        }
        private PStoreProductCategory _parent;
    
        public virtual ICollection<StoreProductCategory> StoreProductCategories
        {
            get
            {
                if (_storeProductCategories == null)
                {
                    var newCollection = new FixupCollection<StoreProductCategory>();
                    newCollection.CollectionChanged += FixupStoreProductCategories;
                    _storeProductCategories = newCollection;
                }
                return _storeProductCategories;
            }
            set
            {
                if (!ReferenceEquals(_storeProductCategories, value))
                {
                    var previousValue = _storeProductCategories as FixupCollection<StoreProductCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreProductCategories;
                    }
                    _storeProductCategories = value;
                    var newValue = value as FixupCollection<StoreProductCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreProductCategories;
                    }
                }
            }
        }
        private ICollection<StoreProductCategory> _storeProductCategories;
    
        public virtual ICollection<ProductCategoryMetadata> ProductCategoryMetadatas
        {
            get
            {
                if (_productCategoryMetadatas == null)
                {
                    var newCollection = new FixupCollection<ProductCategoryMetadata>();
                    newCollection.CollectionChanged += FixupProductCategoryMetadatas;
                    _productCategoryMetadatas = newCollection;
                }
                return _productCategoryMetadatas;
            }
            set
            {
                if (!ReferenceEquals(_productCategoryMetadatas, value))
                {
                    var previousValue = _productCategoryMetadatas as FixupCollection<ProductCategoryMetadata>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductCategoryMetadatas;
                    }
                    _productCategoryMetadatas = value;
                    var newValue = value as FixupCollection<ProductCategoryMetadata>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductCategoryMetadatas;
                    }
                }
            }
        }
        private ICollection<ProductCategoryMetadata> _productCategoryMetadatas;
    
        public virtual ICollection<ProductCategoryMetadataGroup> ProductCategoryMetadataGroups
        {
            get
            {
                if (_productCategoryMetadataGroups == null)
                {
                    var newCollection = new FixupCollection<ProductCategoryMetadataGroup>();
                    newCollection.CollectionChanged += FixupProductCategoryMetadataGroups;
                    _productCategoryMetadataGroups = newCollection;
                }
                return _productCategoryMetadataGroups;
            }
            set
            {
                if (!ReferenceEquals(_productCategoryMetadataGroups, value))
                {
                    var previousValue = _productCategoryMetadataGroups as FixupCollection<ProductCategoryMetadataGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductCategoryMetadataGroups;
                    }
                    _productCategoryMetadataGroups = value;
                    var newValue = value as FixupCollection<ProductCategoryMetadataGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductCategoryMetadataGroups;
                    }
                }
            }
        }
        private ICollection<ProductCategoryMetadataGroup> _productCategoryMetadataGroups;
    
        public virtual ICollection<PTDProduct> Products
        {
            get
            {
                if (_products == null)
                {
                    var newCollection = new FixupCollection<PTDProduct>();
                    newCollection.CollectionChanged += FixupProducts;
                    _products = newCollection;
                }
                return _products;
            }
            set
            {
                if (!ReferenceEquals(_products, value))
                {
                    var previousValue = _products as FixupCollection<PTDProduct>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProducts;
                    }
                    _products = value;
                    var newValue = value as FixupCollection<PTDProduct>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProducts;
                    }
                }
            }
        }
        private ICollection<PTDProduct> _products;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupParent(PStoreProductCategory previousValue)
        {
            if (previousValue != null && previousValue.Children.Contains(this))
            {
                previousValue.Children.Remove(this);
            }
    
            if (Parent != null)
            {
                if (!Parent.Children.Contains(this))
                {
                    Parent.Children.Add(this);
                }
                if (ParentProductCategoryId != Parent.Id)
                {
                    ParentProductCategoryId = Parent.Id;
                }
            }
            else if (!_settingFK)
            {
                ParentProductCategoryId = null;
            }
        }
    
        private void FixupChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PStoreProductCategory item in e.NewItems)
                {
                    item.Parent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PStoreProductCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Parent, this))
                    {
                        item.Parent = null;
                    }
                }
            }
        }
    
        private void FixupStoreProductCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreProductCategory item in e.NewItems)
                {
                    item.ProductCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreProductCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProductCategory, this))
                    {
                        item.ProductCategory = null;
                    }
                }
            }
        }
    
        private void FixupProductCategoryMetadatas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductCategoryMetadata item in e.NewItems)
                {
                    item.ProductCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductCategoryMetadata item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProductCategory, this))
                    {
                        item.ProductCategory = null;
                    }
                }
            }
        }
    
        private void FixupProductCategoryMetadataGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductCategoryMetadataGroup item in e.NewItems)
                {
                    item.ProductCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductCategoryMetadataGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProductCategory, this))
                    {
                        item.ProductCategory = null;
                    }
                }
            }
        }
    
        private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PTDProduct item in e.NewItems)
                {
                    item.ProductCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PTDProduct item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProductCategory, this))
                    {
                        item.ProductCategory = null;
                    }
                }
            }
        }

        #endregion

    }
}
