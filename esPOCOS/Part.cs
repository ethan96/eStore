//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class Part
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual string StoreID
        {
            get;
            set;
        }
    
        public virtual string SProductID
        {
            get;
            set;
        }
    
        public virtual string VProductID
        {
            get;
            set;
        }
    
        public virtual string VendorID
        {
            get;
            set;
        }
    
        public virtual string VendorProductName
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> VendorSuggestedPrice
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> LocalPrice
        {
            get;
            set;
        }
    
        public virtual string PriceSourceProvider
        {
            get;
            set;
        }
    
        public virtual string VendorProductDesc
        {
            get;
            set;
        }
    
        public virtual string StockStatus
        {
            get;
            set;
        }
    
        public virtual string ModelNo
        {
            get;
            set;
        }
    
        public virtual string Certificate
        {
            get;
            set;
        }
    
        public virtual string VendorProductLine
        {
            get;
            set;
        }
    
        public virtual string VendorProductGroup
        {
            get;
            set;
        }
    
        public virtual string TumbnailImageID
        {
            get;
            set;
        }
    
        public virtual string ImageID
        {
            get;
            set;
        }
    
        public virtual string ProductType
        {
            get;
            set;
        }
    
        public virtual string VendorExtendedDesc
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> ShipWeightKG
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> NetWeightKG
        {
            get;
            set;
        }
    
        public virtual string ProductSite
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastUpdated
        {
            get;
            set;
        }
    
        public virtual string LastUpdatedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CreatedDate
        {
            get;
            set;
        }
    
        public virtual string CreatedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Cost
        {
            get;
            set;
        }
    
        public virtual string Currency
        {
            get;
            set;
        }
    
        public virtual string RoHSStatus
        {
            get;
            set;
        }
    
        public virtual string ABCInd
        {
            get;
            set;
        }
    
        public virtual string ProductDivision
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> DimensionHeightCM
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> DimensionWidthCM
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> DimensionLengthCM
        {
            get;
            set;
        }
    
        public virtual string Dimension
        {
            get;
            set;
        }
    
        public virtual string ProductinfoProvider
        {
            get;
            set;
        }
    
        public virtual string InventoryProvider
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CurrentStockQty
        {
            get;
            set;
        }
    
        public virtual Nullable<int> MininumnOrderQty
        {
            get;
            set;
        }
    
        public virtual string VendorFeatures
        {
            get;
            set;
        }
    
        public virtual string PriceType
        {
            get;
            set;
        }
    
        public virtual decimal RecycleFee
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> CPCost
        {
            get;
            set;
        }
    
        public virtual string HTZCode
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> LocalCost
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (StoreID == null) {
						 error_message.Add(new ErrorMessage("StoreID", "StoreID can not be Null "));
				}
		 if (SProductID == null) {
						 error_message.Add(new ErrorMessage("SProductID", "SProductID can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(Part); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual ICollection<ProductResource> ProductResources
        {
            get
            {
                if (_productResources == null)
                {
                    var newCollection = new FixupCollection<ProductResource>();
                    newCollection.CollectionChanged += FixupProductResources;
                    _productResources = newCollection;
                }
                return _productResources;
            }
            set
            {
                if (!ReferenceEquals(_productResources, value))
                {
                    var previousValue = _productResources as FixupCollection<ProductResource>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductResources;
                    }
                    _productResources = value;
                    var newValue = value as FixupCollection<ProductResource>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductResources;
                    }
                }
            }
        }
        private ICollection<ProductResource> _productResources;
    
        public virtual ICollection<RelatedProduct> RelatedProducts
        {
            get
            {
                if (_relatedProducts == null)
                {
                    var newCollection = new FixupCollection<RelatedProduct>();
                    newCollection.CollectionChanged += FixupRelatedProducts;
                    _relatedProducts = newCollection;
                }
                return _relatedProducts;
            }
            set
            {
                if (!ReferenceEquals(_relatedProducts, value))
                {
                    var previousValue = _relatedProducts as FixupCollection<RelatedProduct>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRelatedProducts;
                    }
                    _relatedProducts = value;
                    var newValue = value as FixupCollection<RelatedProduct>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRelatedProducts;
                    }
                }
            }
        }
        private ICollection<RelatedProduct> _relatedProducts;
    
        public virtual ICollection<RelatedProduct> RelatedToProducts
        {
            get
            {
                if (_relatedToProducts == null)
                {
                    var newCollection = new FixupCollection<RelatedProduct>();
                    newCollection.CollectionChanged += FixupRelatedToProducts;
                    _relatedToProducts = newCollection;
                }
                return _relatedToProducts;
            }
            set
            {
                if (!ReferenceEquals(_relatedToProducts, value))
                {
                    var previousValue = _relatedToProducts as FixupCollection<RelatedProduct>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRelatedToProducts;
                    }
                    _relatedToProducts = value;
                    var newValue = value as FixupCollection<RelatedProduct>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRelatedToProducts;
                    }
                }
            }
        }
        private ICollection<RelatedProduct> _relatedToProducts;
    
        public virtual ICollection<PeripheralCompatible> PeripheralCompatibles
        {
            get
            {
                if (_peripheralCompatibles == null)
                {
                    var newCollection = new FixupCollection<PeripheralCompatible>();
                    newCollection.CollectionChanged += FixupPeripheralCompatibles;
                    _peripheralCompatibles = newCollection;
                }
                return _peripheralCompatibles;
            }
            set
            {
                if (!ReferenceEquals(_peripheralCompatibles, value))
                {
                    var previousValue = _peripheralCompatibles as FixupCollection<PeripheralCompatible>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPeripheralCompatibles;
                    }
                    _peripheralCompatibles = value;
                    var newValue = value as FixupCollection<PeripheralCompatible>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPeripheralCompatibles;
                    }
                }
            }
        }
        private ICollection<PeripheralCompatible> _peripheralCompatibles;
    
        public virtual ICollection<ProductLimitedResource> ProductLimitedResources
        {
            get
            {
                if (_productLimitedResources == null)
                {
                    var newCollection = new FixupCollection<ProductLimitedResource>();
                    newCollection.CollectionChanged += FixupProductLimitedResources;
                    _productLimitedResources = newCollection;
                }
                return _productLimitedResources;
            }
            set
            {
                if (!ReferenceEquals(_productLimitedResources, value))
                {
                    var previousValue = _productLimitedResources as FixupCollection<ProductLimitedResource>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductLimitedResources;
                    }
                    _productLimitedResources = value;
                    var newValue = value as FixupCollection<ProductLimitedResource>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductLimitedResources;
                    }
                }
            }
        }
        private ICollection<ProductLimitedResource> _productLimitedResources;
    
        public virtual ICollection<ProductDependency> DependencytoProducts
        {
            get
            {
                if (_dependencytoProducts == null)
                {
                    var newCollection = new FixupCollection<ProductDependency>();
                    newCollection.CollectionChanged += FixupDependencytoProducts;
                    _dependencytoProducts = newCollection;
                }
                return _dependencytoProducts;
            }
            set
            {
                if (!ReferenceEquals(_dependencytoProducts, value))
                {
                    var previousValue = _dependencytoProducts as FixupCollection<ProductDependency>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDependencytoProducts;
                    }
                    _dependencytoProducts = value;
                    var newValue = value as FixupCollection<ProductDependency>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDependencytoProducts;
                    }
                }
            }
        }
        private ICollection<ProductDependency> _dependencytoProducts;
    
        public virtual ICollection<ProductDependency> ProductDependencies
        {
            get
            {
                if (_productDependencies == null)
                {
                    var newCollection = new FixupCollection<ProductDependency>();
                    newCollection.CollectionChanged += FixupProductDependencies;
                    _productDependencies = newCollection;
                }
                return _productDependencies;
            }
            set
            {
                if (!ReferenceEquals(_productDependencies, value))
                {
                    var previousValue = _productDependencies as FixupCollection<ProductDependency>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductDependencies;
                    }
                    _productDependencies = value;
                    var newValue = value as FixupCollection<ProductDependency>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductDependencies;
                    }
                }
            }
        }
        private ICollection<ProductDependency> _productDependencies;
    
        public virtual ICollection<PeripheralAddOnBundleItem> PeripheralAddOnBundleItems
        {
            get
            {
                if (_peripheralAddOnBundleItems == null)
                {
                    var newCollection = new FixupCollection<PeripheralAddOnBundleItem>();
                    newCollection.CollectionChanged += FixupPeripheralAddOnBundleItems;
                    _peripheralAddOnBundleItems = newCollection;
                }
                return _peripheralAddOnBundleItems;
            }
            set
            {
                if (!ReferenceEquals(_peripheralAddOnBundleItems, value))
                {
                    var previousValue = _peripheralAddOnBundleItems as FixupCollection<PeripheralAddOnBundleItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPeripheralAddOnBundleItems;
                    }
                    _peripheralAddOnBundleItems = value;
                    var newValue = value as FixupCollection<PeripheralAddOnBundleItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPeripheralAddOnBundleItems;
                    }
                }
            }
        }
        private ICollection<PeripheralAddOnBundleItem> _peripheralAddOnBundleItems;
    
        public virtual ICollection<PartGradePrice> PartGradePrices
        {
            get
            {
                if (_partGradePrices == null)
                {
                    var newCollection = new FixupCollection<PartGradePrice>();
                    newCollection.CollectionChanged += FixupPartGradePrices;
                    _partGradePrices = newCollection;
                }
                return _partGradePrices;
            }
            set
            {
                if (!ReferenceEquals(_partGradePrices, value))
                {
                    var previousValue = _partGradePrices as FixupCollection<PartGradePrice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPartGradePrices;
                    }
                    _partGradePrices = value;
                    var newValue = value as FixupCollection<PartGradePrice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPartGradePrices;
                    }
                }
            }
        }
        private ICollection<PartGradePrice> _partGradePrices;

        #endregion

        #region Association Fixup
    
        private void FixupProductResources(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductResource item in e.NewItems)
                {
                    item.Part = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductResource item in e.OldItems)
                {
                    if (ReferenceEquals(item.Part, this))
                    {
                        item.Part = null;
                    }
                }
            }
        }
    
        private void FixupRelatedProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (RelatedProduct item in e.NewItems)
                {
                    item.ParentPart = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RelatedProduct item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentPart, this))
                    {
                        item.ParentPart = null;
                    }
                }
            }
        }
    
        private void FixupRelatedToProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (RelatedProduct item in e.NewItems)
                {
                    item.RelatedPart = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RelatedProduct item in e.OldItems)
                {
                    if (ReferenceEquals(item.RelatedPart, this))
                    {
                        item.RelatedPart = null;
                    }
                }
            }
        }
    
        private void FixupPeripheralCompatibles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PeripheralCompatible item in e.NewItems)
                {
                    item.Part = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PeripheralCompatible item in e.OldItems)
                {
                    if (ReferenceEquals(item.Part, this))
                    {
                        item.Part = null;
                    }
                }
            }
        }
    
        private void FixupProductLimitedResources(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductLimitedResource item in e.NewItems)
                {
                    item.Part = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductLimitedResource item in e.OldItems)
                {
                    if (ReferenceEquals(item.Part, this))
                    {
                        item.Part = null;
                    }
                }
            }
        }
    
        private void FixupDependencytoProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductDependency item in e.NewItems)
                {
                    item.ParentPart = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductDependency item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentPart, this))
                    {
                        item.ParentPart = null;
                    }
                }
            }
        }
    
        private void FixupProductDependencies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductDependency item in e.NewItems)
                {
                    item.PartDependency = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductDependency item in e.OldItems)
                {
                    if (ReferenceEquals(item.PartDependency, this))
                    {
                        item.PartDependency = null;
                    }
                }
            }
        }
    
        private void FixupPeripheralAddOnBundleItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PeripheralAddOnBundleItem item in e.NewItems)
                {
                    item.Part = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PeripheralAddOnBundleItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.Part, this))
                    {
                        item.Part = null;
                    }
                }
            }
        }
    
        private void FixupPartGradePrices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PartGradePrice item in e.NewItems)
                {
                    item.Part = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PartGradePrice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Part, this))
                    {
                        item.Part = null;
                    }
                }
            }
        }

        #endregion

    }
}
