//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
using System.Linq;

namespace eStore.POCOS
{
    public partial class MiniSite 
    {
        public enum SiteType { uStore,IotMart,UShop }

        private Dictionary<string, string> _settings;
        public Dictionary<string, string> Settings
        {
            get
            {
                if (_settings == null)
                {
                    _settings = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

                    foreach (SiteParameter sp in this.SiteParameters)
                    {
                        _settings.Add(sp.ParaKey, sp.ParaValue);
                    }
                }
                return _settings;
            }
            set
            {
                _settings = value;
            }
        }
    
        public override bool Equals(object obj)
        {
            if (obj is MiniSite)
                return (MiniSite)obj == this;
            else
                return false;
        }
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
        public static bool operator ==(MiniSite a, MiniSite b)
        {
            // If both are null, or both are same instance, return true.
            if (System.Object.ReferenceEquals(a, b))
            {
                return true;
            }

            // If one is null, but not both, return false.
            if (((object)a == null) || ((object)b == null))
            {
                return false;
            }

            // Return true if the fields match:
            return a.ID == b.ID;
        }

        public static bool operator !=(MiniSite a, MiniSite b)
        {
            return !(a == b);
        }

        public SiteType MiniSiteType
        {
            get
            {
                if (this.SiteName.Equals("IoTMart", StringComparison.OrdinalIgnoreCase))
                    return SiteType.IotMart;
                else if (this.SiteName.Equals("UShop", StringComparison.OrdinalIgnoreCase))
                    return SiteType.UShop;
                else
                    return SiteType.uStore;
            }
        }

        /// <summary>
        /// This method is to retrieve sitte setting and return in String format
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        public string getStringSetting(string key)
        {
            string rlt = string.Empty;
            if (Settings.ContainsKey(key))
            {
                rlt = Settings[key];
            }
            else
            {
                //eStore.Utilities.eStoreLoger.Info(string.Format("Settings {0} is missing in {1}", key, StoreID));
            }
            return rlt;
        }

        /// <summary>
        /// This method is to retrieve store setting and return in Integer format
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        public int? getIntegerSetting(string key)
        {
            int rlt = 0;
            if (Settings.ContainsKey(key))
            {
                int.TryParse(Settings[key], out rlt);
            }
            else
            {
                return null;
            }
            return rlt;
        }

    }
}
