//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class Product : Part
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual string DisplayPartno
        {
            get;
            set;
        }
    
        public virtual bool ShowPrice
        {
            get;
            set;
        }
    
        public virtual bool PublishStatus
        {
            get;
            set;
        }
    
        public virtual decimal StorePrice
        {
            get;
            set;
        }
    
        public virtual string PriceSource
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }
    
        public virtual string ProductDesc
        {
            get;
            set;
        }
    
        public virtual string ProductFeatures
        {
            get;
            set;
        }
    
        public virtual string ExtendedDesc
        {
            get;
            set;
        }
    
        public virtual string ImageURL
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> PromotePrice
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> PromoteStart
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> PromoteEnd
        {
            get;
            set;
        }
    
        public virtual string PromoteMessage
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ClearanceThreshold
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> PromoteMarkup
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EffectiveDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ExpiredDate
        {
            get;
            set;
        }
    
        public virtual string Keywords
        {
            get;
            set;
        }
    
        public virtual string ProductGroup
        {
            get;
            set;
        }
    
        public virtual string PageDescription
        {
            get;
            set;
        }
    
        public virtual string PageTitle
        {
            get;
            set;
        }
    
        public virtual string DataSheet
        {
            get;
            set;
        }
    
        public virtual Nullable<int> WarrantyYear
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ProductLastUpdated
        {
            get;
            set;
        }
    
        public virtual int MarketingStatus
        {
            get;
            set;
        }
    
        public virtual string StoreUrl
        {
            get;
            set;
        }
    
        public virtual Nullable<int> WarrantyMonth
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (DisplayPartno == null) {
						 error_message.Add(new ErrorMessage("DisplayPartno", "DisplayPartno can not be Null "));
				}
		 if (Status == null) {
						 error_message.Add(new ErrorMessage("Status", "Status can not be Null "));
				}
		 if (ProductDesc == null) {
						 error_message.Add(new ErrorMessage("ProductDesc", "ProductDesc can not be Null "));
				}
		 if (ProductFeatures == null) {
						 error_message.Add(new ErrorMessage("ProductFeatures", "ProductFeatures can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(Product); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual Store Store
        {
            get { return _store; }
            set
            {
                if (!ReferenceEquals(_store, value))
                {
                    var previousValue = _store;
                    _store = value;
                    FixupStore(previousValue);
                }
            }
        }
        private Store _store;
    
        public virtual ICollection<ReplaceProduct> ReplaceProducts
        {
            get
            {
                if (_replaceProducts == null)
                {
                    var newCollection = new FixupCollection<ReplaceProduct>();
                    newCollection.CollectionChanged += FixupReplaceProducts;
                    _replaceProducts = newCollection;
                }
                return _replaceProducts;
            }
            set
            {
                if (!ReferenceEquals(_replaceProducts, value))
                {
                    var previousValue = _replaceProducts as FixupCollection<ReplaceProduct>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReplaceProducts;
                    }
                    _replaceProducts = value;
                    var newValue = value as FixupCollection<ReplaceProduct>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReplaceProducts;
                    }
                }
            }
        }
        private ICollection<ReplaceProduct> _replaceProducts;
    
        public virtual ICollection<ProductCategroyMapping> ProductCategroyMappings
        {
            get
            {
                if (_productCategroyMappings == null)
                {
                    var newCollection = new FixupCollection<ProductCategroyMapping>();
                    newCollection.CollectionChanged += FixupProductCategroyMappings;
                    _productCategroyMappings = newCollection;
                }
                return _productCategroyMappings;
            }
            set
            {
                if (!ReferenceEquals(_productCategroyMappings, value))
                {
                    var previousValue = _productCategroyMappings as FixupCollection<ProductCategroyMapping>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductCategroyMappings;
                    }
                    _productCategroyMappings = value;
                    var newValue = value as FixupCollection<ProductCategroyMapping>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductCategroyMappings;
                    }
                }
            }
        }
        private ICollection<ProductCategroyMapping> _productCategroyMappings;
    
        public virtual ICollection<CTOSComparision> CTOSComparisions
        {
            get
            {
                if (_cTOSComparisions == null)
                {
                    var newCollection = new FixupCollection<CTOSComparision>();
                    newCollection.CollectionChanged += FixupCTOSComparisions;
                    _cTOSComparisions = newCollection;
                }
                return _cTOSComparisions;
            }
            set
            {
                if (!ReferenceEquals(_cTOSComparisions, value))
                {
                    var previousValue = _cTOSComparisions as FixupCollection<CTOSComparision>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCTOSComparisions;
                    }
                    _cTOSComparisions = value;
                    var newValue = value as FixupCollection<CTOSComparision>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCTOSComparisions;
                    }
                }
            }
        }
        private ICollection<CTOSComparision> _cTOSComparisions;
    
        public virtual ICollection<PeripheralAddOn> PeripheralAddOns
        {
            get
            {
                if (_peripheralAddOns == null)
                {
                    var newCollection = new FixupCollection<PeripheralAddOn>();
                    newCollection.CollectionChanged += FixupPeripheralAddOns;
                    _peripheralAddOns = newCollection;
                }
                return _peripheralAddOns;
            }
            set
            {
                if (!ReferenceEquals(_peripheralAddOns, value))
                {
                    var previousValue = _peripheralAddOns as FixupCollection<PeripheralAddOn>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPeripheralAddOns;
                    }
                    _peripheralAddOns = value;
                    var newValue = value as FixupCollection<PeripheralAddOn>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPeripheralAddOns;
                    }
                }
            }
        }
        private ICollection<PeripheralAddOn> _peripheralAddOns;
    
        public virtual ICollection<CrossSellProduct> CrossSellProducts
        {
            get
            {
                if (_crossSellProducts == null)
                {
                    var newCollection = new FixupCollection<CrossSellProduct>();
                    newCollection.CollectionChanged += FixupCrossSellProducts;
                    _crossSellProducts = newCollection;
                }
                return _crossSellProducts;
            }
            set
            {
                if (!ReferenceEquals(_crossSellProducts, value))
                {
                    var previousValue = _crossSellProducts as FixupCollection<CrossSellProduct>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCrossSellProducts;
                    }
                    _crossSellProducts = value;
                    var newValue = value as FixupCollection<CrossSellProduct>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCrossSellProducts;
                    }
                }
            }
        }
        private ICollection<CrossSellProduct> _crossSellProducts;

        #endregion

        #region Association Fixup
    
        private void FixupStore(Store previousValue)
        {
            if (Store != null)
            {
                if (StoreID != Store.StoreID)
                {
                    StoreID = Store.StoreID;
                }
            }
        }
    
        private void FixupReplaceProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReplaceProduct item in e.NewItems)
                {
                    item.OriginalProduct = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReplaceProduct item in e.OldItems)
                {
                    if (ReferenceEquals(item.OriginalProduct, this))
                    {
                        item.OriginalProduct = null;
                    }
                }
            }
        }
    
        private void FixupProductCategroyMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductCategroyMapping item in e.NewItems)
                {
                    item.Product = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductCategroyMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                }
            }
        }
    
        private void FixupCTOSComparisions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CTOSComparision item in e.NewItems)
                {
                    item.Product = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CTOSComparision item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                }
            }
        }
    
        private void FixupPeripheralAddOns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PeripheralAddOn item in e.NewItems)
                {
                    item.Product = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PeripheralAddOn item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                }
            }
        }
    
        private void FixupCrossSellProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CrossSellProduct item in e.NewItems)
                {
                    item.Product = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CrossSellProduct item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                }
            }
        }

        #endregion

    }
}
