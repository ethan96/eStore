//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class ReplaceProduct
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string StoreID
        {
            get { return _storeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_storeID != value)
                    {
                        if (OriginalProduct != null && OriginalProduct.StoreID != value)
                        {
                            var previousValue = _originalProduct;
                            _originalProduct = null;
                            FixupOriginalProduct(previousValue, skipKeys: true);
                        }
                        if (ReplacedProduct != null && ReplacedProduct.StoreID != value)
                        {
                            var previousValue = _replacedProduct;
                            _replacedProduct = null;
                            FixupReplacedProduct(previousValue, skipKeys: true);
                        }
                        _storeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _storeID;
    
        public virtual string OrigSProductID
        {
            get { return _origSProductID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_origSProductID != value)
                    {
                        if (OriginalProduct != null && OriginalProduct.SProductID != value)
                        {
                            var previousValue = _originalProduct;
                            _originalProduct = null;
                            FixupOriginalProduct(previousValue, skipKeys: true);
                        }
                        _origSProductID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _origSProductID;
    
        public virtual string RepSProductID
        {
            get { return _repSProductID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_repSProductID != value)
                    {
                        if (ReplacedProduct != null && ReplacedProduct.SProductID != value)
                        {
                            var previousValue = _replacedProduct;
                            _replacedProduct = null;
                            FixupReplacedProduct(previousValue, skipKeys: true);
                        }
                        _repSProductID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _repSProductID;
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual string CreatedBy
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (OrigSProductID == null) {
						 error_message.Add(new ErrorMessage("OrigSProductID", "OrigSProductID can not be Null "));
				}
		 if (RepSProductID == null) {
						 error_message.Add(new ErrorMessage("RepSProductID", "RepSProductID can not be Null "));
				}
		 if (CreatedBy == null) {
						 error_message.Add(new ErrorMessage("CreatedBy", "CreatedBy can not be Null "));
				}
		 if (Status == null) {
						 error_message.Add(new ErrorMessage("Status", "Status can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(ReplaceProduct); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual Product OriginalProduct
        {
            get { return _originalProduct; }
            set
            {
                if (!ReferenceEquals(_originalProduct, value))
                {
                    var previousValue = _originalProduct;
                    _originalProduct = value;
                    FixupOriginalProduct(previousValue);
                }
            }
        }
        private Product _originalProduct;
    
        public virtual Product ReplacedProduct
        {
            get { return _replacedProduct; }
            set
            {
                if (!ReferenceEquals(_replacedProduct, value))
                {
                    var previousValue = _replacedProduct;
                    _replacedProduct = value;
                    FixupReplacedProduct(previousValue);
                }
            }
        }
        private Product _replacedProduct;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupOriginalProduct(Product previousValue, bool skipKeys = false)
        {
            if (previousValue != null && previousValue.ReplaceProducts.Contains(this))
            {
                previousValue.ReplaceProducts.Remove(this);
            }
    
            if (OriginalProduct != null)
            {
                if (!OriginalProduct.ReplaceProducts.Contains(this))
                {
                    OriginalProduct.ReplaceProducts.Add(this);
                }
                if (StoreID != OriginalProduct.StoreID)
                {
                    StoreID = OriginalProduct.StoreID;
                }
                if (OrigSProductID != OriginalProduct.SProductID)
                {
                    OrigSProductID = OriginalProduct.SProductID;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                StoreID = null;
            }
        }
    
        private void FixupReplacedProduct(Product previousValue, bool skipKeys = false)
        {
            if (ReplacedProduct != null)
            {
                if (StoreID != ReplacedProduct.StoreID)
                {
                    StoreID = ReplacedProduct.StoreID;
                }
                if (RepSProductID != ReplacedProduct.SProductID)
                {
                    RepSProductID = ReplacedProduct.SProductID;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                StoreID = null;
            }
        }

        #endregion

    }
}
