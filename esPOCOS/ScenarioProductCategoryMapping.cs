//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class ScenarioProductCategoryMapping
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int ScenarioProductCategoryMappingID
        {
            get;
            set;
        }
    
        public virtual string StoreID
        {
            get { return _storeID; }
            set
            {
                if (_storeID != value)
                {
                    if (ProductCategroyMapping != null && ProductCategroyMapping.StoreID != value)
                    {
                        ProductCategroyMapping = null;
                    }
                    _storeID = value;
                }
            }
        }
        private string _storeID;
    
        public virtual int CategoryID
        {
            get { return _categoryID; }
            set
            {
                if (_categoryID != value)
                {
                    if (ProductCategroyMapping != null && ProductCategroyMapping.CategoryID != value)
                    {
                        ProductCategroyMapping = null;
                    }
                    _categoryID = value;
                }
            }
        }
        private int _categoryID;
    
        public virtual string SProductID
        {
            get { return _sProductID; }
            set
            {
                if (_sProductID != value)
                {
                    if (ProductCategroyMapping != null && ProductCategroyMapping.SProductID != value)
                    {
                        ProductCategroyMapping = null;
                    }
                    _sProductID = value;
                }
            }
        }
        private string _sProductID;
    
        public virtual string CategoryPath
        {
            get { return _categoryPath; }
            set
            {
                if (_categoryPath != value)
                {
                    if (ProductCategroyMapping != null && ProductCategroyMapping.CategoryPath != value)
                    {
                        ProductCategroyMapping = null;
                    }
                    _categoryPath = value;
                }
            }
        }
        private string _categoryPath;
    
        public virtual int ScenarioCategoryID
        {
            get { return _scenarioCategoryID; }
            set
            {
                if (_scenarioCategoryID != value)
                {
                    if (ScenarioCategory != null && ScenarioCategory.ScenarioCategoryID != value)
                    {
                        ScenarioCategory = null;
                    }
                    _scenarioCategoryID = value;
                }
            }
        }
        private int _scenarioCategoryID;

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (StoreID == null) {
						 error_message.Add(new ErrorMessage("StoreID", "StoreID can not be Null "));
				}
		 if (SProductID == null) {
						 error_message.Add(new ErrorMessage("SProductID", "SProductID can not be Null "));
				}
		 if (CategoryPath == null) {
						 error_message.Add(new ErrorMessage("CategoryPath", "CategoryPath can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(ScenarioProductCategoryMapping); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual ProductCategroyMapping ProductCategroyMapping
        {
            get { return _productCategroyMapping; }
            set
            {
                if (!ReferenceEquals(_productCategroyMapping, value))
                {
                    var previousValue = _productCategroyMapping;
                    _productCategroyMapping = value;
                    FixupProductCategroyMapping(previousValue);
                }
            }
        }
        private ProductCategroyMapping _productCategroyMapping;
    
        public virtual ScenarioCategory ScenarioCategory
        {
            get { return _scenarioCategory; }
            set
            {
                if (!ReferenceEquals(_scenarioCategory, value))
                {
                    var previousValue = _scenarioCategory;
                    _scenarioCategory = value;
                    FixupScenarioCategory(previousValue);
                }
            }
        }
        private ScenarioCategory _scenarioCategory;

        #endregion

        #region Association Fixup
    
        private void FixupProductCategroyMapping(ProductCategroyMapping previousValue)
        {
            if (ProductCategroyMapping != null)
            {
                if (StoreID != ProductCategroyMapping.StoreID)
                {
                    StoreID = ProductCategroyMapping.StoreID;
                }
                if (CategoryID != ProductCategroyMapping.CategoryID)
                {
                    CategoryID = ProductCategroyMapping.CategoryID;
                }
                if (SProductID != ProductCategroyMapping.SProductID)
                {
                    SProductID = ProductCategroyMapping.SProductID;
                }
                if (CategoryPath != ProductCategroyMapping.CategoryPath)
                {
                    CategoryPath = ProductCategroyMapping.CategoryPath;
                }
            }
        }
    
        private void FixupScenarioCategory(ScenarioCategory previousValue)
        {
            if (previousValue != null && previousValue.ScenarioProductCategoryMappings.Contains(this))
            {
                previousValue.ScenarioProductCategoryMappings.Remove(this);
            }
    
            if (ScenarioCategory != null)
            {
                if (!ScenarioCategory.ScenarioProductCategoryMappings.Contains(this))
                {
                    ScenarioCategory.ScenarioProductCategoryMappings.Add(this);
                }
                if (ScenarioCategoryID != ScenarioCategory.ScenarioCategoryID)
                {
                    ScenarioCategoryID = ScenarioCategory.ScenarioCategoryID;
                }
            }
        }

        #endregion

    }
}
