//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class Spec_Category
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual Nullable<short> CATEGORY_LEVEL
        {
            get;
            set;
        }
    
        public virtual int CATEGORY_ID
        {
            get { return _cATEGORY_ID; }
            set
            {
                if (_cATEGORY_ID != value)
                {
                    if (Spec_Category2 != null && Spec_Category2.CATEGORY_ID != value)
                    {
                        Spec_Category2 = null;
                    }
                    _cATEGORY_ID = value;
                }
            }
        }
        private int _cATEGORY_ID;
    
        public virtual string CATEGORY_DISPLAYNAME
        {
            get;
            set;
        }
    
        public virtual string CATEGORY_TYPE
        {
            get;
            set;
        }
    
        public virtual Nullable<int> SEQUENCE
        {
            get;
            set;
        }
    
        public virtual string CONDITIONS
        {
            get;
            set;
        }
    
        public virtual string CREATED_BY
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CREATED_DATE
        {
            get;
            set;
        }
    
        public virtual string LAST_UPDATED_BY
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LAST_UPDATED_DATE
        {
            get;
            set;
        }
    
        public virtual string DisplayType
        {
            get;
            set;
        }
    
        public virtual string NodeTree
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (CATEGORY_DISPLAYNAME == null) {
						 error_message.Add(new ErrorMessage("CATEGORY_DISPLAYNAME", "CATEGORY_DISPLAYNAME can not be Null "));
				}
		 if (CATEGORY_TYPE == null) {
						 error_message.Add(new ErrorMessage("CATEGORY_TYPE", "CATEGORY_TYPE can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(Spec_Category); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Part_Spec_V3> Part_Spec_V3
        {
            get
            {
                if (_part_Spec_V3 == null)
                {
                    var newCollection = new FixupCollection<Part_Spec_V3>();
                    newCollection.CollectionChanged += FixupPart_Spec_V3;
                    _part_Spec_V3 = newCollection;
                }
                return _part_Spec_V3;
            }
            set
            {
                if (!ReferenceEquals(_part_Spec_V3, value))
                {
                    var previousValue = _part_Spec_V3 as FixupCollection<Part_Spec_V3>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPart_Spec_V3;
                    }
                    _part_Spec_V3 = value;
                    var newValue = value as FixupCollection<Part_Spec_V3>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPart_Spec_V3;
                    }
                }
            }
        }
        private ICollection<Part_Spec_V3> _part_Spec_V3;
    
        public virtual Spec_Category Spec_Category1
        {
            get { return _spec_Category1; }
            set
            {
                if (!ReferenceEquals(_spec_Category1, value))
                {
                    var previousValue = _spec_Category1;
                    _spec_Category1 = value;
                    FixupSpec_Category1(previousValue);
                }
            }
        }
        private Spec_Category _spec_Category1;
    
        public virtual Spec_Category Spec_Category2
        {
            get { return _spec_Category2; }
            set
            {
                if (!ReferenceEquals(_spec_Category2, value))
                {
                    var previousValue = _spec_Category2;
                    _spec_Category2 = value;
                    FixupSpec_Category2(previousValue);
                }
            }
        }
        private Spec_Category _spec_Category2;
    
        public virtual ICollection<Spec_Category_Lang> Spec_Category_Lang
        {
            get
            {
                if (_spec_Category_Lang == null)
                {
                    var newCollection = new FixupCollection<Spec_Category_Lang>();
                    newCollection.CollectionChanged += FixupSpec_Category_Lang;
                    _spec_Category_Lang = newCollection;
                }
                return _spec_Category_Lang;
            }
            set
            {
                if (!ReferenceEquals(_spec_Category_Lang, value))
                {
                    var previousValue = _spec_Category_Lang as FixupCollection<Spec_Category_Lang>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSpec_Category_Lang;
                    }
                    _spec_Category_Lang = value;
                    var newValue = value as FixupCollection<Spec_Category_Lang>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSpec_Category_Lang;
                    }
                }
            }
        }
        private ICollection<Spec_Category_Lang> _spec_Category_Lang;

        #endregion

        #region Association Fixup
    
        private void FixupSpec_Category1(Spec_Category previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Spec_Category2, this))
            {
                previousValue.Spec_Category2 = null;
            }
    
            if (Spec_Category1 != null)
            {
                Spec_Category1.Spec_Category2 = this;
            }
        }
    
        private void FixupSpec_Category2(Spec_Category previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Spec_Category1, this))
            {
                previousValue.Spec_Category1 = null;
            }
    
            if (Spec_Category2 != null)
            {
                Spec_Category2.Spec_Category1 = this;
                if (CATEGORY_ID != Spec_Category2.CATEGORY_ID)
                {
                    CATEGORY_ID = Spec_Category2.CATEGORY_ID;
                }
            }
        }
    
        private void FixupPart_Spec_V3(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Part_Spec_V3 item in e.NewItems)
                {
                    item.Spec_Category = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Part_Spec_V3 item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spec_Category, this))
                    {
                        item.Spec_Category = null;
                    }
                }
            }
        }
    
        private void FixupSpec_Category_Lang(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Spec_Category_Lang item in e.NewItems)
                {
                    item.Spec_Category = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Spec_Category_Lang item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spec_Category, this))
                    {
                        item.Spec_Category = null;
                    }
                }
            }
        }

        #endregion

    }
}
