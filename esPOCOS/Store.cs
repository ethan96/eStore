//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class Store
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual string StoreID
        {
            get;
            set;
        }
    
        public virtual string StoreName
        {
            get;
            set;
        }
    
        public virtual string StoreLangID
        {
            get;
            set;
        }
    
        public virtual string StoreURL
        {
            get;
            set;
        }
    
        public virtual string StoreContact
        {
            get;
            set;
        }
    
        public virtual string StoreDefaultVersion
        {
            get;
            set;
        }
    
        public virtual string StoreSearchKey
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual string MetaKeywords
        {
            get;
            set;
        }
    
        public virtual string MetaDesc
        {
            get;
            set;
        }
    
        public virtual string DMFID
        {
            get { return _dMFID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_dMFID != value)
                    {
                        if (DMF != null && DMF.DMFID != value)
                        {
                            DMF = null;
                        }
                        _dMFID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _dMFID;
    
        public virtual string StoreMembershippass
        {
            get;
            set;
        }
    
        public virtual string ServiceHours
        {
            get;
            set;
        }
    
        public virtual string AdminEmail
        {
            get;
            set;
        }
    
        public virtual string UserDeptEmail
        {
            get;
            set;
        }
    
        public virtual string OrderDeptEmail
        {
            get;
            set;
        }
    
        public virtual string SupportDeptEmail
        {
            get;
            set;
        }
    
        public virtual string TaxProvider
        {
            get;
            set;
        }
    
        public virtual string ShippingProvider
        {
            get;
            set;
        }
    
        public virtual string UserServiceProvider
        {
            get;
            set;
        }
    
        public virtual string ThemeManager
        {
            get;
            set;
        }
    
        public virtual string DefaultSiteMaintain
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ShipFromAddressID
        {
            get { return _shipFromAddressID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_shipFromAddressID != value)
                    {
                        if (ShipFromAddress != null && ShipFromAddress.AddressID != value)
                        {
                            ShipFromAddress = null;
                        }
                        _shipFromAddressID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _shipFromAddressID;
    
        public virtual Nullable<int> DropShipAddressID
        {
            get { return _dropShipAddressID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_dropShipAddressID != value)
                    {
                        if (DropShipAddress != null && DropShipAddress.AddressID != value)
                        {
                            DropShipAddress = null;
                        }
                        _dropShipAddressID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _dropShipAddressID;
    
        public virtual Nullable<bool> ShowStock
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> UseLimeLight
        {
            get;
            set;
        }
    
        public virtual string TimeZone
        {
            get;
            set;
        }
    
        public virtual string CultureCode
        {
            get;
            set;
        }
    
        public virtual string DefaultCountry
        {
            get { return _defaultCountry; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_defaultCountry != value)
                    {
                        if (Country != null && Country.CountryName != value)
                        {
                            Country = null;
                        }
                        _defaultCountry = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _defaultCountry;
    
        public virtual string RegionName
        {
            get;
            set;
        }
    
        public virtual string RegionDescription
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (StoreID == null) {
						 error_message.Add(new ErrorMessage("StoreID", "StoreID can not be Null "));
				}
		 if (StoreURL == null) {
						 error_message.Add(new ErrorMessage("StoreURL", "StoreURL can not be Null "));
				}
		 if (Status == null) {
						 error_message.Add(new ErrorMessage("Status", "Status can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(Store); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual Address ShipFromAddress
        {
            get { return _shipFromAddress; }
            set
            {
                if (!ReferenceEquals(_shipFromAddress, value))
                {
                    var previousValue = _shipFromAddress;
                    _shipFromAddress = value;
                    FixupShipFromAddress(previousValue);
                }
            }
        }
        private Address _shipFromAddress;
    
        public virtual Address DropShipAddress
        {
            get { return _dropShipAddress; }
            set
            {
                if (!ReferenceEquals(_dropShipAddress, value))
                {
                    var previousValue = _dropShipAddress;
                    _dropShipAddress = value;
                    FixupDropShipAddress(previousValue);
                }
            }
        }
        private Address _dropShipAddress;
    
        public virtual ICollection<ExtendedWaranty> ExtendedWaranties
        {
            get
            {
                if (_extendedWaranties == null)
                {
                    var newCollection = new FixupCollection<ExtendedWaranty>();
                    newCollection.CollectionChanged += FixupExtendedWaranties;
                    _extendedWaranties = newCollection;
                }
                return _extendedWaranties;
            }
            set
            {
                if (!ReferenceEquals(_extendedWaranties, value))
                {
                    var previousValue = _extendedWaranties as FixupCollection<ExtendedWaranty>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupExtendedWaranties;
                    }
                    _extendedWaranties = value;
                    var newValue = value as FixupCollection<ExtendedWaranty>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupExtendedWaranties;
                    }
                }
            }
        }
        private ICollection<ExtendedWaranty> _extendedWaranties;
    
        public virtual ICollection<StoreFreightRate> StoreFreightRates
        {
            get
            {
                if (_storeFreightRates == null)
                {
                    var newCollection = new FixupCollection<StoreFreightRate>();
                    newCollection.CollectionChanged += FixupStoreFreightRates;
                    _storeFreightRates = newCollection;
                }
                return _storeFreightRates;
            }
            set
            {
                if (!ReferenceEquals(_storeFreightRates, value))
                {
                    var previousValue = _storeFreightRates as FixupCollection<StoreFreightRate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreFreightRates;
                    }
                    _storeFreightRates = value;
                    var newValue = value as FixupCollection<StoreFreightRate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreFreightRates;
                    }
                }
            }
        }
        private ICollection<StoreFreightRate> _storeFreightRates;
    
        public virtual ICollection<StoreParameter> StoreParameters
        {
            get
            {
                if (_storeParameters == null)
                {
                    var newCollection = new FixupCollection<StoreParameter>();
                    newCollection.CollectionChanged += FixupStoreParameters;
                    _storeParameters = newCollection;
                }
                return _storeParameters;
            }
            set
            {
                if (!ReferenceEquals(_storeParameters, value))
                {
                    var previousValue = _storeParameters as FixupCollection<StoreParameter>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreParameters;
                    }
                    _storeParameters = value;
                    var newValue = value as FixupCollection<StoreParameter>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreParameters;
                    }
                }
            }
        }
        private ICollection<StoreParameter> _storeParameters;
    
        public virtual ICollection<StorePayment> StorePayments
        {
            get
            {
                if (_storePayments == null)
                {
                    var newCollection = new FixupCollection<StorePayment>();
                    newCollection.CollectionChanged += FixupStorePayments;
                    _storePayments = newCollection;
                }
                return _storePayments;
            }
            set
            {
                if (!ReferenceEquals(_storePayments, value))
                {
                    var previousValue = _storePayments as FixupCollection<StorePayment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStorePayments;
                    }
                    _storePayments = value;
                    var newValue = value as FixupCollection<StorePayment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStorePayments;
                    }
                }
            }
        }
        private ICollection<StorePayment> _storePayments;
    
        public virtual ICollection<Country> Countries
        {
            get
            {
                if (_countries == null)
                {
                    var newCollection = new FixupCollection<Country>();
                    newCollection.CollectionChanged += FixupCountries;
                    _countries = newCollection;
                }
                return _countries;
            }
            set
            {
                if (!ReferenceEquals(_countries, value))
                {
                    var previousValue = _countries as FixupCollection<Country>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCountries;
                    }
                    _countries = value;
                    var newValue = value as FixupCollection<Country>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCountries;
                    }
                }
            }
        }
        private ICollection<Country> _countries;
    
        public virtual ICollection<TaxConfig> TaxConfigs
        {
            get
            {
                if (_taxConfigs == null)
                {
                    var newCollection = new FixupCollection<TaxConfig>();
                    newCollection.CollectionChanged += FixupTaxConfigs;
                    _taxConfigs = newCollection;
                }
                return _taxConfigs;
            }
            set
            {
                if (!ReferenceEquals(_taxConfigs, value))
                {
                    var previousValue = _taxConfigs as FixupCollection<TaxConfig>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTaxConfigs;
                    }
                    _taxConfigs = value;
                    var newValue = value as FixupCollection<TaxConfig>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTaxConfigs;
                    }
                }
            }
        }
        private ICollection<TaxConfig> _taxConfigs;
    
        public virtual ICollection<Menu> Menus
        {
            get
            {
                if (_menus == null)
                {
                    var newCollection = new FixupCollection<Menu>();
                    newCollection.CollectionChanged += FixupMenus;
                    _menus = newCollection;
                }
                return _menus;
            }
            set
            {
                if (!ReferenceEquals(_menus, value))
                {
                    var previousValue = _menus as FixupCollection<Menu>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMenus;
                    }
                    _menus = value;
                    var newValue = value as FixupCollection<Menu>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMenus;
                    }
                }
            }
        }
        private ICollection<Menu> _menus;
    
        public virtual ICollection<StoreAddress> StoreAddresses
        {
            get
            {
                if (_storeAddresses == null)
                {
                    var newCollection = new FixupCollection<StoreAddress>();
                    newCollection.CollectionChanged += FixupStoreAddresses;
                    _storeAddresses = newCollection;
                }
                return _storeAddresses;
            }
            set
            {
                if (!ReferenceEquals(_storeAddresses, value))
                {
                    var previousValue = _storeAddresses as FixupCollection<StoreAddress>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreAddresses;
                    }
                    _storeAddresses = value;
                    var newValue = value as FixupCollection<StoreAddress>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreAddresses;
                    }
                }
            }
        }
        private ICollection<StoreAddress> _storeAddresses;
    
        public virtual ICollection<SolutionStoreTab> SolutionStoreTabs
        {
            get
            {
                if (_solutionStoreTabs == null)
                {
                    var newCollection = new FixupCollection<SolutionStoreTab>();
                    newCollection.CollectionChanged += FixupSolutionStoreTabs;
                    _solutionStoreTabs = newCollection;
                }
                return _solutionStoreTabs;
            }
            set
            {
                if (!ReferenceEquals(_solutionStoreTabs, value))
                {
                    var previousValue = _solutionStoreTabs as FixupCollection<SolutionStoreTab>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSolutionStoreTabs;
                    }
                    _solutionStoreTabs = value;
                    var newValue = value as FixupCollection<SolutionStoreTab>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSolutionStoreTabs;
                    }
                }
            }
        }
        private ICollection<SolutionStoreTab> _solutionStoreTabs;
    
        public virtual ICollection<StoreErrorCode> StoreErrorCodes
        {
            get
            {
                if (_storeErrorCodes == null)
                {
                    var newCollection = new FixupCollection<StoreErrorCode>();
                    newCollection.CollectionChanged += FixupStoreErrorCodes;
                    _storeErrorCodes = newCollection;
                }
                return _storeErrorCodes;
            }
            set
            {
                if (!ReferenceEquals(_storeErrorCodes, value))
                {
                    var previousValue = _storeErrorCodes as FixupCollection<StoreErrorCode>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreErrorCodes;
                    }
                    _storeErrorCodes = value;
                    var newValue = value as FixupCollection<StoreErrorCode>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreErrorCodes;
                    }
                }
            }
        }
        private ICollection<StoreErrorCode> _storeErrorCodes;
    
        public virtual ICollection<Translation> Translations
        {
            get
            {
                if (_translations == null)
                {
                    var newCollection = new FixupCollection<Translation>();
                    newCollection.CollectionChanged += FixupTranslations;
                    _translations = newCollection;
                }
                return _translations;
            }
            set
            {
                if (!ReferenceEquals(_translations, value))
                {
                    var previousValue = _translations as FixupCollection<Translation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTranslations;
                    }
                    _translations = value;
                    var newValue = value as FixupCollection<Translation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTranslations;
                    }
                }
            }
        }
        private ICollection<Translation> _translations;
    
        public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
    
        public virtual ICollection<StoreCarier> StoreCariers
        {
            get
            {
                if (_storeCariers == null)
                {
                    var newCollection = new FixupCollection<StoreCarier>();
                    newCollection.CollectionChanged += FixupStoreCariers;
                    _storeCariers = newCollection;
                }
                return _storeCariers;
            }
            set
            {
                if (!ReferenceEquals(_storeCariers, value))
                {
                    var previousValue = _storeCariers as FixupCollection<StoreCarier>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreCariers;
                    }
                    _storeCariers = value;
                    var newValue = value as FixupCollection<StoreCarier>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreCariers;
                    }
                }
            }
        }
        private ICollection<StoreCarier> _storeCariers;
    
        public virtual ICollection<SalesPerson> SalesPersons
        {
            get
            {
                if (_salesPersons == null)
                {
                    var newCollection = new FixupCollection<SalesPerson>();
                    newCollection.CollectionChanged += FixupSalesPersons;
                    _salesPersons = newCollection;
                }
                return _salesPersons;
            }
            set
            {
                if (!ReferenceEquals(_salesPersons, value))
                {
                    var previousValue = _salesPersons as FixupCollection<SalesPerson>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalesPersons;
                    }
                    _salesPersons = value;
                    var newValue = value as FixupCollection<SalesPerson>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalesPersons;
                    }
                }
            }
        }
        private ICollection<SalesPerson> _salesPersons;
    
        public virtual ICollection<DMF> DMFs
        {
            get
            {
                if (_dMFs == null)
                {
                    var newCollection = new FixupCollection<DMF>();
                    newCollection.CollectionChanged += FixupDMFs;
                    _dMFs = newCollection;
                }
                return _dMFs;
            }
            set
            {
                if (!ReferenceEquals(_dMFs, value))
                {
                    var previousValue = _dMFs as FixupCollection<DMF>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDMFs;
                    }
                    _dMFs = value;
                    var newValue = value as FixupCollection<DMF>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDMFs;
                    }
                }
            }
        }
        private ICollection<DMF> _dMFs;
    
        public virtual ICollection<OrderSyncParameter> OrderSyncParameters
        {
            get
            {
                if (_orderSyncParameters == null)
                {
                    var newCollection = new FixupCollection<OrderSyncParameter>();
                    newCollection.CollectionChanged += FixupOrderSyncParameters;
                    _orderSyncParameters = newCollection;
                }
                return _orderSyncParameters;
            }
            set
            {
                if (!ReferenceEquals(_orderSyncParameters, value))
                {
                    var previousValue = _orderSyncParameters as FixupCollection<OrderSyncParameter>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrderSyncParameters;
                    }
                    _orderSyncParameters = value;
                    var newValue = value as FixupCollection<OrderSyncParameter>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrderSyncParameters;
                    }
                }
            }
        }
        private ICollection<OrderSyncParameter> _orderSyncParameters;
    
        public virtual DMF DMF
        {
            get { return _dMF; }
            set
            {
                if (!ReferenceEquals(_dMF, value))
                {
                    var previousValue = _dMF;
                    _dMF = value;
                    FixupDMF(previousValue);
                }
            }
        }
        private DMF _dMF;
    
        public virtual ICollection<WidgetPage> WidgetPages
        {
            get
            {
                if (_widgetPages == null)
                {
                    var newCollection = new FixupCollection<WidgetPage>();
                    newCollection.CollectionChanged += FixupWidgetPages;
                    _widgetPages = newCollection;
                }
                return _widgetPages;
            }
            set
            {
                if (!ReferenceEquals(_widgetPages, value))
                {
                    var previousValue = _widgetPages as FixupCollection<WidgetPage>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWidgetPages;
                    }
                    _widgetPages = value;
                    var newValue = value as FixupCollection<WidgetPage>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWidgetPages;
                    }
                }
            }
        }
        private ICollection<WidgetPage> _widgetPages;
    
        public virtual ICollection<PriceAdjustRule> PriceAdjustRules
        {
            get
            {
                if (_priceAdjustRules == null)
                {
                    var newCollection = new FixupCollection<PriceAdjustRule>();
                    newCollection.CollectionChanged += FixupPriceAdjustRules;
                    _priceAdjustRules = newCollection;
                }
                return _priceAdjustRules;
            }
            set
            {
                if (!ReferenceEquals(_priceAdjustRules, value))
                {
                    var previousValue = _priceAdjustRules as FixupCollection<PriceAdjustRule>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPriceAdjustRules;
                    }
                    _priceAdjustRules = value;
                    var newValue = value as FixupCollection<PriceAdjustRule>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPriceAdjustRules;
                    }
                }
            }
        }
        private ICollection<PriceAdjustRule> _priceAdjustRules;
    
        public virtual ICollection<OrderByPartnoExcludeRule> OrderByPartnoExcludeRules
        {
            get
            {
                if (_orderByPartnoExcludeRules == null)
                {
                    var newCollection = new FixupCollection<OrderByPartnoExcludeRule>();
                    newCollection.CollectionChanged += FixupOrderByPartnoExcludeRules;
                    _orderByPartnoExcludeRules = newCollection;
                }
                return _orderByPartnoExcludeRules;
            }
            set
            {
                if (!ReferenceEquals(_orderByPartnoExcludeRules, value))
                {
                    var previousValue = _orderByPartnoExcludeRules as FixupCollection<OrderByPartnoExcludeRule>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrderByPartnoExcludeRules;
                    }
                    _orderByPartnoExcludeRules = value;
                    var newValue = value as FixupCollection<OrderByPartnoExcludeRule>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrderByPartnoExcludeRules;
                    }
                }
            }
        }
        private ICollection<OrderByPartnoExcludeRule> _orderByPartnoExcludeRules;
    
        public virtual ICollection<SpecialProductPrice> SpecialProductPrices
        {
            get
            {
                if (_specialProductPrices == null)
                {
                    var newCollection = new FixupCollection<SpecialProductPrice>();
                    newCollection.CollectionChanged += FixupSpecialProductPrices;
                    _specialProductPrices = newCollection;
                }
                return _specialProductPrices;
            }
            set
            {
                if (!ReferenceEquals(_specialProductPrices, value))
                {
                    var previousValue = _specialProductPrices as FixupCollection<SpecialProductPrice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSpecialProductPrices;
                    }
                    _specialProductPrices = value;
                    var newValue = value as FixupCollection<SpecialProductPrice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSpecialProductPrices;
                    }
                }
            }
        }
        private ICollection<SpecialProductPrice> _specialProductPrices;
    
        public virtual ICollection<Campaign> Campaigns
        {
            get
            {
                if (_campaigns == null)
                {
                    var newCollection = new FixupCollection<Campaign>();
                    newCollection.CollectionChanged += FixupCampaigns;
                    _campaigns = newCollection;
                }
                return _campaigns;
            }
            set
            {
                if (!ReferenceEquals(_campaigns, value))
                {
                    var previousValue = _campaigns as FixupCollection<Campaign>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCampaigns;
                    }
                    _campaigns = value;
                    var newValue = value as FixupCollection<Campaign>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCampaigns;
                    }
                }
            }
        }
        private ICollection<Campaign> _campaigns;
    
        public virtual ICollection<StoreCurrency> StoreCurrencies
        {
            get
            {
                if (_storeCurrencies == null)
                {
                    var newCollection = new FixupCollection<StoreCurrency>();
                    newCollection.CollectionChanged += FixupStoreCurrencies;
                    _storeCurrencies = newCollection;
                }
                return _storeCurrencies;
            }
            set
            {
                if (!ReferenceEquals(_storeCurrencies, value))
                {
                    var previousValue = _storeCurrencies as FixupCollection<StoreCurrency>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreCurrencies;
                    }
                    _storeCurrencies = value;
                    var newValue = value as FixupCollection<StoreCurrency>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreCurrencies;
                    }
                }
            }
        }
        private ICollection<StoreCurrency> _storeCurrencies;
    
        public virtual ICollection<MiniSite> MiniSites
        {
            get
            {
                if (_miniSites == null)
                {
                    var newCollection = new FixupCollection<MiniSite>();
                    newCollection.CollectionChanged += FixupMiniSites;
                    _miniSites = newCollection;
                }
                return _miniSites;
            }
            set
            {
                if (!ReferenceEquals(_miniSites, value))
                {
                    var previousValue = _miniSites as FixupCollection<MiniSite>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMiniSites;
                    }
                    _miniSites = value;
                    var newValue = value as FixupCollection<MiniSite>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMiniSites;
                    }
                }
            }
        }
        private ICollection<MiniSite> _miniSites;
    
        public virtual ICollection<StoreLanguage> StoreLanguages
        {
            get
            {
                if (_storeLanguages == null)
                {
                    var newCollection = new FixupCollection<StoreLanguage>();
                    newCollection.CollectionChanged += FixupStoreLanguages;
                    _storeLanguages = newCollection;
                }
                return _storeLanguages;
            }
            set
            {
                if (!ReferenceEquals(_storeLanguages, value))
                {
                    var previousValue = _storeLanguages as FixupCollection<StoreLanguage>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreLanguages;
                    }
                    _storeLanguages = value;
                    var newValue = value as FixupCollection<StoreLanguage>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreLanguages;
                    }
                }
            }
        }
        private ICollection<StoreLanguage> _storeLanguages;
    
        public virtual ICollection<Solution> Solutions
        {
            get
            {
                if (_solutions == null)
                {
                    var newCollection = new FixupCollection<Solution>();
                    newCollection.CollectionChanged += FixupSolutions;
                    _solutions = newCollection;
                }
                return _solutions;
            }
            set
            {
                if (!ReferenceEquals(_solutions, value))
                {
                    var previousValue = _solutions as FixupCollection<Solution>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSolutions;
                    }
                    _solutions = value;
                    var newValue = value as FixupCollection<Solution>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSolutions;
                    }
                }
            }
        }
        private ICollection<Solution> _solutions;
    
        public virtual ICollection<Policy> Policies
        {
            get
            {
                if (_policies == null)
                {
                    var newCollection = new FixupCollection<Policy>();
                    newCollection.CollectionChanged += FixupPolicies;
                    _policies = newCollection;
                }
                return _policies;
            }
            set
            {
                if (!ReferenceEquals(_policies, value))
                {
                    var previousValue = _policies as FixupCollection<Policy>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPolicies;
                    }
                    _policies = value;
                    var newValue = value as FixupCollection<Policy>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPolicies;
                    }
                }
            }
        }
        private ICollection<Policy> _policies;
    
        public virtual ICollection<PolicyCategory> PolicyCategories
        {
            get
            {
                if (_policyCategories == null)
                {
                    var newCollection = new FixupCollection<PolicyCategory>();
                    newCollection.CollectionChanged += FixupPolicyCategories;
                    _policyCategories = newCollection;
                }
                return _policyCategories;
            }
            set
            {
                if (!ReferenceEquals(_policyCategories, value))
                {
                    var previousValue = _policyCategories as FixupCollection<PolicyCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPolicyCategories;
                    }
                    _policyCategories = value;
                    var newValue = value as FixupCollection<PolicyCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPolicyCategories;
                    }
                }
            }
        }
        private ICollection<PolicyCategory> _policyCategories;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupShipFromAddress(Address previousValue)
        {
            if (previousValue != null && previousValue.Stores.Contains(this))
            {
                previousValue.Stores.Remove(this);
            }
    
            if (ShipFromAddress != null)
            {
                if (!ShipFromAddress.Stores.Contains(this))
                {
                    ShipFromAddress.Stores.Add(this);
                }
                if (ShipFromAddressID != ShipFromAddress.AddressID)
                {
                    ShipFromAddressID = ShipFromAddress.AddressID;
                }
            }
            else if (!_settingFK)
            {
                ShipFromAddressID = null;
            }
        }
    
        private void FixupDropShipAddress(Address previousValue)
        {
            if (previousValue != null && previousValue.Stores1.Contains(this))
            {
                previousValue.Stores1.Remove(this);
            }
    
            if (DropShipAddress != null)
            {
                if (!DropShipAddress.Stores1.Contains(this))
                {
                    DropShipAddress.Stores1.Add(this);
                }
                if (DropShipAddressID != DropShipAddress.AddressID)
                {
                    DropShipAddressID = DropShipAddress.AddressID;
                }
            }
            else if (!_settingFK)
            {
                DropShipAddressID = null;
            }
        }
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.Stores.Contains(this))
            {
                previousValue.Stores.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.Stores.Contains(this))
                {
                    Country.Stores.Add(this);
                }
                if (DefaultCountry != Country.CountryName)
                {
                    DefaultCountry = Country.CountryName;
                }
            }
            else if (!_settingFK)
            {
                DefaultCountry = null;
            }
        }
    
        private void FixupDMF(DMF previousValue)
        {
            if (previousValue != null && previousValue.Stores.Contains(this))
            {
                previousValue.Stores.Remove(this);
            }
    
            if (DMF != null)
            {
                if (!DMF.Stores.Contains(this))
                {
                    DMF.Stores.Add(this);
                }
                if (DMFID != DMF.DMFID)
                {
                    DMFID = DMF.DMFID;
                }
            }
            else if (!_settingFK)
            {
                DMFID = null;
            }
        }
    
        private void FixupExtendedWaranties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ExtendedWaranty item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ExtendedWaranty item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupStoreFreightRates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreFreightRate item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreFreightRate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupStoreParameters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreParameter item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupStorePayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StorePayment item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StorePayment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupCountries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Country item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Country item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupTaxConfigs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TaxConfig item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaxConfig item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupMenus(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Menu item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Menu item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupStoreAddresses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreAddress item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreAddress item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupSolutionStoreTabs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SolutionStoreTab item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SolutionStoreTab item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupStoreErrorCodes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreErrorCode item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreErrorCode item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupTranslations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Translation item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Translation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupStoreCariers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreCarier item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreCarier item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupSalesPersons(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalesPerson item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalesPerson item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupDMFs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DMF item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DMF item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupOrderSyncParameters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OrderSyncParameter item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderSyncParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupWidgetPages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WidgetPage item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WidgetPage item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupPriceAdjustRules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PriceAdjustRule item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PriceAdjustRule item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupOrderByPartnoExcludeRules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OrderByPartnoExcludeRule item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderByPartnoExcludeRule item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupSpecialProductPrices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SpecialProductPrice item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SpecialProductPrice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupCampaigns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Campaign item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Campaign item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupStoreCurrencies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreCurrency item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreCurrency item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupMiniSites(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MiniSite item in e.NewItems)
                {
                    item.StoreID = StoreID;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MiniSite item in e.OldItems)
                {
                }
            }
        }
    
        private void FixupStoreLanguages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreLanguage item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreLanguage item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupSolutions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Solution item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Solution item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupPolicies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Policy item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Policy item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }
    
        private void FixupPolicyCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PolicyCategory item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PolicyCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }

        #endregion

    }
}
