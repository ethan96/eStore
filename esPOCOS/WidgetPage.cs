//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using eStore.POCOS.PocoX;
 

namespace eStore.POCOS
{
    public partial class WidgetPage
    {
        #region Primitive Properties
     
    	public List<ErrorMessage> error_message{
    		get;
    		set;
    	}
    
    
        public virtual int WidgetPageID
        {
            get;
            set;
        }
    
        public virtual string StoreID
        {
            get { return _storeID; }
            set
            {
                if (_storeID != value)
                {
                    if (Store != null && Store.StoreID != value)
                    {
                        Store = null;
                    }
                    _storeID = value;
                }
            }
        }
        private string _storeID;
    
        public virtual string PageName
        {
            get;
            set;
        }
    
        public virtual string PageDescription
        {
            get;
            set;
        }
    
        public virtual string CreatedBy
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastUpdated
        {
            get;
            set;
        }
    
        public virtual string LastUpdateBy
        {
            get;
            set;
        }
    
        public virtual string Path
        {
            get;
            set;
        }
    
        public virtual string FileName
        {
            get;
            set;
        }
    
        public virtual bool Publish
        {
            get;
            set;
        }
    
        public virtual string BusinessGroup
        {
            get;
            set;
        }
    
        public virtual string SEOName1
        {
            get;
            set;
        }
    
        public virtual string SEOName2
        {
            get;
            set;
        }
    
        public virtual string StoreURL
        {
            get;
            set;
        }

        #endregion

        #region Validation
    	
    	public bool validate() {
    		error_message = new List<ErrorMessage>();
    	   		 if (StoreID == null) {
						 error_message.Add(new ErrorMessage("StoreID", "StoreID can not be Null "));
				}

    	   
    	   if(error_message.Count>0) {
    	   	return false;
    	   }else {
    	    return true;
    	   }
    	
    	}
    	
    	/* public void Write()
        {
            Type type = typeof(WidgetPage); // Get type pointer
             PropertyInfo[] fields = type.GetProperties(); // Obtain all fields
                foreach (var pinfo in fields) // Loop through fields
                {
                    string name = pinfo.Name; // Get string name
                    object temp = pinfo.GetValue(pinfo.Name,null); // Get value
                if (temp is int) // See if it is an integer.
                {
                    int value = (int)temp;
                    Console.Write(name);
                    Console.Write(" (int) = ");
                    Console.WriteLine(value);
                }
                else if (temp is string) // See if it is a string.
                {
                    string value = temp as string;
                    Console.Write(name);
                    Console.Write(" (string) = ");
                    Console.WriteLine(value);
                }
            }
        }*/
     
    	
    	
        #endregion

        #region Navigation Properties
    
        public virtual Store Store
        {
            get { return _store; }
            set
            {
                if (!ReferenceEquals(_store, value))
                {
                    var previousValue = _store;
                    _store = value;
                    FixupStore(previousValue);
                }
            }
        }
        private Store _store;
    
        public virtual ICollection<Widget> Widgets
        {
            get
            {
                if (_widgets == null)
                {
                    var newCollection = new FixupCollection<Widget>();
                    newCollection.CollectionChanged += FixupWidgets;
                    _widgets = newCollection;
                }
                return _widgets;
            }
            set
            {
                if (!ReferenceEquals(_widgets, value))
                {
                    var previousValue = _widgets as FixupCollection<Widget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWidgets;
                    }
                    _widgets = value;
                    var newValue = value as FixupCollection<Widget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWidgets;
                    }
                }
            }
        }
        private ICollection<Widget> _widgets;
    
        public virtual ICollection<ProductWidgetMapping> ProductWidgetMappings
        {
            get
            {
                if (_productWidgetMappings == null)
                {
                    var newCollection = new FixupCollection<ProductWidgetMapping>();
                    newCollection.CollectionChanged += FixupProductWidgetMappings;
                    _productWidgetMappings = newCollection;
                }
                return _productWidgetMappings;
            }
            set
            {
                if (!ReferenceEquals(_productWidgetMappings, value))
                {
                    var previousValue = _productWidgetMappings as FixupCollection<ProductWidgetMapping>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductWidgetMappings;
                    }
                    _productWidgetMappings = value;
                    var newValue = value as FixupCollection<ProductWidgetMapping>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductWidgetMappings;
                    }
                }
            }
        }
        private ICollection<ProductWidgetMapping> _productWidgetMappings;

        #endregion

        #region Association Fixup
    
        private void FixupStore(Store previousValue)
        {
            if (previousValue != null && previousValue.WidgetPages.Contains(this))
            {
                previousValue.WidgetPages.Remove(this);
            }
    
            if (Store != null)
            {
                if (!Store.WidgetPages.Contains(this))
                {
                    Store.WidgetPages.Add(this);
                }
                if (StoreID != Store.StoreID)
                {
                    StoreID = Store.StoreID;
                }
            }
        }
    
        private void FixupWidgets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Widget item in e.NewItems)
                {
                    item.WidgetPage = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Widget item in e.OldItems)
                {
                    if (ReferenceEquals(item.WidgetPage, this))
                    {
                        item.WidgetPage = null;
                    }
                }
            }
        }
    
        private void FixupProductWidgetMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductWidgetMapping item in e.NewItems)
                {
                    item.WidgetPage = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductWidgetMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.WidgetPage, this))
                    {
                        item.WidgetPage = null;
                    }
                }
            }
        }

        #endregion

    }
}
